{"version":3,"sources":["images/logo.PNG","react-auth0-spa.js","utils/history.js","components/individual/AccessControl.js","components/individual/NavBar.js","utils/formatTime.js","social/bets/Leg.js","social/bets/OpenBets.js","social/bets/SettledBets.js","components/pages/Profile.js","components/individual/PrivateRoute.js","components/admin/fixtureResults/FixturesTable.js","utils/isEmpty.js","components/admin/fixtureResults/EnterResult.js","components/admin/fixtureResults/NeedResultsPage.js","components/pages/Admin.js","components/individual/MyContests/MyLiveContests.js","utils/startCountdown.js","components/individual/MyContests/MyUpcomingContests.js","components/individual/MyContests/MyHistoryContests.js","components/individual/UpcomingContests/ContestDetails.js","components/pages/ContestsPage.js","utils/formatCurrency.js","components/individual/UpcomingContests/UpcomingContests.js","components/individual/ActiveContest/Leaderboard.js","utils/convertOdds.js","components/individual/ActiveContest/bets/Leg.js","components/individual/ActiveContest/bets/SettledBets.js","components/individual/ActiveContest/bets/OpenBets.js","components/individual/ActiveContest/BetSlip/Bet.js","models/bet/bet.js","api/bets/fetchContestBets.js","components/shared/ConfirmationModal.js","components/individual/ActiveContest/BetSlip/BetSlip.js","utils/formatHandicap.js","components/individual/ActiveContest/Book/Fixtures/FootballFixts.js","components/individual/ActiveContest/Book/Book.js","social/Book/Fixture.js","components/pages/LiveContest.js","social/Book/BetSlip/Bet.js","social/shared/ConfirmationModal.js","social/Book/BetSlip/BetSlip.js","social/Book/Book.js","App.js","serviceWorker.js","redux/userReducer.js","redux/contestReducer.js","redux/reducer.js","index.js"],"names":["module","exports","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","createBrowserHistory","AccessControl","props","permitted","setPermitted","perm","i","permissions","length","allowedPermissions","protectedResource","connect","state","ID","username","balance","dispatch","setPermissions","type","setUserID","setUsername","setBalance","fetchPermissions","token","fetch","headers","Authorization","response","json","fetchDetails","data","intAccountID","Navbar","className","expand","sticky","Brand","Image","src","logo","rounded","width","height","Toggle","Collapse","Nav","to","Link","NavDropdown","Item","disabled","Divider","onClick","formatTime","time","Date","toLocaleString","Leg","line","leg","fixture","team","name","bet","openBets","contest","Table","responsive","map","win","legs","odds","dec","parseFloat","wager","toFixed","Math","abs","settledBets","result","user_id","setOpenBets","bets","setSettledBets","activeTab","setActiveTab","open","settled","forEach","Result","push","fetchBets","Form","Row","Col","Control","as","onChange","e","target","key","Tabs","fill","activeKey","onSelect","k","id","Tab","eventKey","PrivateRoute","Component","component","path","rest","targetUrl","fn","render","FixturesTable","colSpan","fixts","fixt","fixture_id","setSelected","commence_time","home_team","away_team","isEmpty","obj","Object","keys","EnterResult","homeScore","setHomeScore","awayScore","setAwayScore","setError","updateFixture","body","fixt_id","results","home_score","away_score","options","method","JSON","stringify","then","removeFixt","catch","err","log","Card","Header","Body","Label","column","Button","isNaN","Alert","variant","NeedResultsPage","needResults","setNeedResults","selectedFixt","setSelectedFixt","fetch_needsResults","md","index","findIndex","tmp","splice","AdminPage","MyLiveContests","contests","intContestID","strContestName","strContestType","decEntry","intContestPlayerID","updateStartCountdown","date","newdate","now","getTime","timeleft","day","getDay","hour","getHours","ampm","days","floor","hours","minutes","seconds","countdown","getMonth","getDate","elementID","getElementById","innerHTML","MyUpcomingContests","countdowns","setInterval","dtmStart","clearInterval","decEntryFee","decPrizePool","MyHistoryContests","ContestDetails","accountID","setContests","liveContests","setLiveContests","upcomingContests","setUpcomingContests","historyContests","setHistoryContests","display","setDisplay","setTimeout","fetchMyContests","active","upcoming","count","intContestStatusID","defaultActiveKey","Spinner","animation","Modal","show","onHide","closeButton","Title","contestType","contestID","formatCurrency","expandedContest","setExpandedContest","showDetail","setShowDetail","enterContest","opts","start","handleOpenDetail","entry","prizepool","bankroll","num","Number","style","currency","leaderboards","contestant","record","p","w","l","email","convertOdds","parsedOdds","americanOdds","round","Bet","risk","setRisk","setWin","tmpWin","american","tmpRisk","addWager","toggleDetails","detailRows","getElementsByClassName","arrow","classList","remove","add","handicap","total","removeBets","slipType","Group","placeholder","tabIndex","readOnly","model","String","fixtureID","ML","Spread","Total","fetchContestBets","entryid","ConfirmationModal","close","message","Footer","action","buttonText","available","match","useRouteMatch","showConfirm","setShowConfirm","records","setRecords","indexOf","tmpBets","formatStraightBet","betModel","decimal","legType","spread","ml","contestPlayerID","jsonBet","validateBets","totalWagered","isError","tmpRecords","tmpModel","insertBetRecords","code","ids","contestBets","formatHandicap","nums","split","FootballFixts","handleBetClick","bettype","element","removeBet","away","home","main","sp","game_lines","over","under","setBets","addBet","fixtures","league","leagueID","formattedTime","Book","setLeaguesDisp","sm","leagues","intLeagueID","strLeagueName","leagueobj","parseInt","sport_id","Fixture","entryID","upcomingFixts","inplayFixts","setContest","setEntryID","setAvailable","avaialable","setBankroll","setLeagues","setUpcoming","setInplay","inplay","setLeaderboards","fetchContest","contestid","fetchLeagues","fetch_leaderboards","organizeFixtures","leagueFixts","time_status","upcIndex","lf","inpIndex","leagueIds","leagueIDs","end","dtmEnd","fetchFixtures","decInitialBankRoll","getOwnPropertyNames","spreads","points","h2h","totals","rowSpan","account_id","book","setBook","fetchBook","App","Container","exact","Profile","Boolean","hostname","initValues","userReducer","contestReducer","reducers","combineReducers","store","createStore","reducer","ReactDOM","domain","config","client_id","clientId","redirect_uri","origin","audience","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ceb2f03d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47646def.PNG\";","import React, { useState, useEffect, useContext } from \"react\";\r\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = () =>\r\n  window.history.replaceState({}, document.title, window.location.pathname);\r\n\r\nexport const Auth0Context = React.createContext();\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n  children,\r\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n  ...initOptions\r\n}) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState();\r\n  const [user, setUser] = useState();\r\n  const [auth0Client, setAuth0] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      const auth0FromHook = await createAuth0Client(initOptions);\r\n      setAuth0(auth0FromHook);\r\n\r\n      if (window.location.search.includes(\"code=\") &&\r\n          window.location.search.includes(\"state=\")) {\r\n        const { appState } = await auth0FromHook.handleRedirectCallback();\r\n        onRedirectCallback(appState);\r\n      }\r\n\r\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n\r\n      setIsAuthenticated(isAuthenticated);\r\n\r\n      if (isAuthenticated) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const loginWithPopup = async (params = {}) => {\r\n    setPopupOpen(true);\r\n    try {\r\n      await auth0Client.loginWithPopup(params);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setPopupOpen(false);\r\n    }\r\n    const user = await auth0Client.getUser();\r\n    setUser(user);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const handleRedirectCallback = async () => {\r\n    setLoading(true);\r\n    await auth0Client.handleRedirectCallback();\r\n    const user = await auth0Client.getUser();\r\n    setLoading(false);\r\n    setIsAuthenticated(true);\r\n    setUser(user);\r\n  };\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        popupOpen,\r\n        loginWithPopup,\r\n        handleRedirectCallback,\r\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n        logout: (...p) => auth0Client.logout(...p)\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};","import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();","// src/components/NavBar.js\r\n\r\nimport React, {useState, useEffect} from \"react\";\r\n\r\nconst AccessControl = (props) => {\r\n    const [permitted, setPermitted]  = useState(false);\r\n\r\n    /*Runs only on initial render\r\n      Will send token to API and fetch user permissions  \r\n      userPermissions will be updated\r\n    */\r\n    useEffect(() => {\r\n      let perm = false;\r\n      for(let i = 0; i < props.permissions.length; i++){\r\n          if(props.allowedPermissions.includes(props.permissions[i])){\r\n             perm = true;\r\n          };\r\n      }\r\n      setPermitted(perm)\r\n    },[])\r\n    \r\n    return (\r\n        <span>\r\n            {permitted && props.protectedResource}\r\n            {!permitted && null}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default AccessControl;","import React, {useEffect} from \"react\";\r\nimport { useAuth0 } from \"../../react-auth0-spa\";\r\nimport {Navbar, Nav, NavDropdown, Image } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport logo from '../../images/logo.PNG';\r\n\r\n//components \r\nimport AccessControl from './AccessControl';\r\n\r\nconst NavBar = (props) => {\r\n  const { isAuthenticated, loginWithRedirect, logout, getTokenSilently } = useAuth0();\r\n\r\n  /* Runs on initial mount\r\n  *  Calls fetchPermissions + fetchDetails then updates redux store  \r\n  */\r\n  useEffect( () => {\r\n      if(isAuthenticated){\r\n      let permissions =[];\r\n\r\n      async function fetchPermissions(){\r\n          try {\r\n          const token = await getTokenSilently();\r\n          const response = await fetch(\"https://api.lineleaders.net/accounts/permissions\", {\r\n          headers: {\r\n              Authorization: `Bearer ${token}`\r\n          }\r\n          });\r\n          \r\n          permissions = await response.json();\r\n          props.setPermissions(permissions);\r\n          } catch (error) {\r\n          console.error(error);\r\n          }\r\n      }\r\n\r\n      async function fetchDetails(){\r\n          try {\r\n            const token = await getTokenSilently();\r\n            const response = await fetch(\"https://api.lineleaders.net/accounts/details\", {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n            });\r\n          \r\n            let data = await response.json();\r\n            props.setUserID(data.intAccountID);\r\n          } catch (error) {\r\n            console.error(error);\r\n          }\r\n      }\r\n      fetchPermissions();\r\n      fetchDetails();\r\n      }\r\n  },[])\r\n  \r\n  return (\r\n    <Navbar className=\"main-nav\" expand=\"md\" sticky=\"top\">\r\n      <Navbar.Brand>\r\n        <Image  src={logo} rounded width=\"100%\" height=\"auto\"/>\r\n      </Navbar.Brand> \r\n      <Navbar.Toggle />\r\n      <Navbar.Collapse>\r\n        <Nav className=\"mr-auto\">\r\n          {/* Show regardless of login state */}\r\n\r\n          {/* Show when logged in */}\r\n          {isAuthenticated && (\r\n            <>\r\n              <LinkContainer to=\"/book\">\r\n                <Nav.Link>Book</Nav.Link>\r\n              </LinkContainer>\r\n              <NavDropdown title=\"My Account\">\r\n                <NavDropdown.Item disabled>Balance: ${props.balance}</NavDropdown.Item>\r\n                <LinkContainer to=\"/profile\">\r\n                  <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                </LinkContainer>\r\n                <AccessControl permissions={props.permissions} allowedPermissions={[\"create:contest\"]} protectedResource={\r\n                  <LinkContainer to=\"/admin\">\r\n                    <NavDropdown.Item>Admin</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                } />\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item onClick={() => logout()}>Log out</NavDropdown.Item>\r\n              </NavDropdown>\r\n            </>\r\n          )}\r\n  \r\n          {/* Show if not logged in */}\r\n          {!isAuthenticated && (\r\n            <Nav.Link onClick={() => loginWithRedirect({})}>Log in</Nav.Link>\r\n          )}\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      permissions: state.user.permissions,\r\n      ID: state.user.ID,\r\n      username: state.user.username,\r\n      balance: state.user.balance\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = ( dispatch ) => {\r\n    return{\r\n      setPermissions: (permissions) => { dispatch({type: 'SET_PERMISSIONS', permissions: permissions}) },\r\n      setUserID: (ID) => { dispatch({type: 'SET_USER_ID', ID: ID})},\r\n      setUsername: (username) => { dispatch({type: 'SET_USER_USERNAME', username: username})},\r\n      setBalance: (balance) => { dispatch({type: 'SET_USER_BALANCE', balance: balance})}\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(NavBar);","//function to format from epoch time\r\nconst formatTime = (time) => {\r\n    let adjusted = new Date(time *1000);\r\n    let formattedTime = adjusted.toLocaleString();  \r\n    return(formattedTime);  \r\n}\r\n\r\nexport default formatTime","import React from 'react'\r\nimport formatTime from '../../utils/formatTime';\r\n\r\nconst Leg = (props) => {\r\n    let leg = props.leg\r\n    let time = formatTime(leg.fixture.time)\r\n\r\n    if(leg.line.type === \"Moneyline\"){\r\n        return (\r\n            <td>\r\n                    <b>{leg.line.team.type === \"Draw\" ? \r\n                        leg.line.team.type\r\n                            :\r\n                        leg.line.team.name\r\n                    }</b>\r\n                    <br/>{leg.fixture.fixture}\r\n                    <br/>{time}\r\n            </td>\r\n        )\r\n    }else if(leg.line.type === \"Spread\"){\r\n        let line;\r\n        if(leg.line.line > 0){\r\n            line = leg.line.line;\r\n        }else{\r\n            line = leg.line.line;\r\n        }\r\n        return (\r\n            <td>\r\n                <b>{leg.line.team.name + \" \" + line}</b>\r\n                <br/>{leg.fixture.fixture}\r\n                <br/>{time}\r\n            </td>\r\n        )\r\n    }else if(leg.line.type === \"Total\"){\r\n        return (\r\n            <td>\r\n                <b>{leg.line.bet + \" \" + leg.line.line}</b>\r\n                <br/>{leg.fixture.fixture}\r\n                <br/>{time}\r\n            </td>\r\n        )\r\n    }\r\n    return(\r\n        <></>\r\n    )\r\n}\r\n\r\nexport default Leg","import React from 'react';\r\nimport {Table } from 'react-bootstrap';\r\nimport Leg from './Leg';\r\nimport '../../css/betsTable.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst OpenBets = (props) => {    \r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Type</th>\r\n                    <th>Line(s)</th>\r\n                    <th>Odds</th>\r\n                    <th>Risk</th>\r\n                    <th>Win</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.openBets.map(bet=>{\r\n                    if(bet.type === \"Straight\"){\r\n                        const leg = bet.legs[0];\r\n                        //calc win field\r\n                        let win;\r\n                        if(bet.odds > 0){\r\n                            let dec = bet.odds/100;\r\n                            win = parseFloat(bet.wager * dec).toFixed(2)\r\n                        }else{\r\n                            let dec = Math.abs(bet.odds)/100;\r\n                            win = parseFloat(bet.wager / dec).toFixed(2)\r\n                        }\r\n                        \r\n                        return(\r\n                            <tr className={\"openBet\"}>\r\n                                <td>{bet.type}</td>\r\n                                <Leg leg={leg} />\r\n                                <td>{bet.odds}</td>\r\n                                <td>{\"$\"+parseFloat(bet.wager).toFixed(2)}</td>\r\n                                <td>{\"$\"+win}</td>\r\n                            </tr>\r\n                        )\r\n                    }else{\r\n                        return <></>;\r\n                    }\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        openBets: state.contest.openBets\r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps)(OpenBets);\r\n","import React from 'react';\r\nimport {Table } from 'react-bootstrap';\r\nimport Leg from './Leg';\r\nimport '../../css/betsTable.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst SettledBets = (props) => {    \r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Type</th>\r\n                    <th>Line(s)</th>\r\n                    <th>Odds</th>\r\n                    <th>Risk</th>\r\n                    <th>Win</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.settledBets.map(bet=>{\r\n                    if(bet.type === \"Straight\"){\r\n                        const leg = bet.legs[0];\r\n                        //calc win field\r\n                        let win;\r\n                        if(bet.odds > 0){\r\n                            let dec = bet.odds/100;\r\n                            win = parseFloat(bet.wager * dec).toFixed(2)\r\n                        }else{\r\n                            let dec = Math.abs(bet.odds)/100;\r\n                            win = parseFloat(bet.wager / dec).toFixed(2)\r\n                        }\r\n\r\n                        return(\r\n                            <tr className={\"bet\"+bet.result}>\r\n                                <td>{bet.type}</td>\r\n                                <Leg leg={leg} />\r\n                                <td>{bet.odds}</td>\r\n                                <td>{\"$\"+parseFloat(bet.wager).toFixed(2)}</td>\r\n                                {bet.result === \"W\" ? <td>{\"+$\"+win}</td> :<></>}\r\n                                {bet.result === \"L\" ? <td>{\"-$\"+parseFloat(bet.wager).toFixed(2)}</td> :<></>}\r\n                                {bet.result === \"P\" ? <td>{\"-\"}</td> :<></>}\r\n                            </tr>\r\n                        )\r\n                    }else{\r\n                        return <></>;\r\n                    }\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settledBets: state.contest.settledBets\r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps)(SettledBets);\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { useAuth0 } from \"../../react-auth0-spa\";\r\nimport {Col, Form, Tabs, Tab} from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport OpenBets from '../../social/bets/OpenBets';\r\nimport SettledBets from '../../social/bets/SettledBets';\r\n\r\nconst Profile = (props) => {\r\n  const { loading, user } = useAuth0();\r\n  const [showCreateBet, setShowCreateBet] = useState(false);\r\n\r\n  const [display, setDisplay] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('book');\r\n\r\n  //Function to run when user_id is set and fetch bets\r\n  useEffect(()=>{  \r\n    const fetchBets = async ()=> {\r\n      const response = await fetch('https://api.lineleaders.net/bets/personal?id='+props.user_id);\r\n      const bets = await response.json();\r\n      //separate into open and settled and set redux state\r\n      let open = [];\r\n      let settled = [];\r\n\r\n      bets.forEach(bet=>{\r\n          if(bet.result === \"W\"|| bet.result === \"L\" || bet.Result ===\"P\"){\r\n              settled.push(bet);\r\n          }else{\r\n              open.push(bet);\r\n          }\r\n      })\r\n      props.setOpenBets(open);\r\n      props.setSettledBets(settled);\r\n    }\r\n\r\n    fetchBets();\r\n  },[props.user_id])\r\n\r\n  return (\r\n    <>\r\n      <Form className=\"hidden-lg\">\r\n        <Form.Row>                    \r\n          <Col>\r\n              <Form.Control as=\"select\" onChange={(e)=>setActiveTab(e.target.value)}>\r\n                <option key=\"posts\" value=\"posts\">Posts</option>\r\n                <option key=\"open\" value=\"open\">{\"Open (\"+props.openBets.length+\")\"}</option>\r\n                <option key=\"settled\" value=\"settled\">Settled</option>\r\n              </Form.Control>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n      {/* Display when screens are large */}\r\n      <Tabs fill activeKey={activeTab} onSelect={(k)=>setActiveTab(k)} id=\"contestsTab\" className=\"hidden-md\">\r\n          <Tab eventKey=\"posts\" title=\"Posts\">\r\n             \r\n          </Tab>\r\n          <Tab eventKey=\"open\" title={\"Open (\"+props.openBets.length+\")\"}>\r\n              <OpenBets />\r\n          </Tab>\r\n          <Tab eventKey=\"settled\" title=\"Settled\">\r\n              <SettledBets />\r\n          </Tab>\r\n      </Tabs>   \r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user_id: state.user.ID,\r\n    openBets: state.user.openBets,\r\n    settledBets: state.user.settledBets\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n  return{\r\n    setOpenBets: bets => { dispatch({type: 'SET_OPEN_BETS', bets: bets })},      \r\n    setSettledBets: bets => { dispatch({type: 'SET_SETTLED_BETS', bets: bets })},\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import React, { useEffect } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { useAuth0 } from \"../../react-auth0-spa\";\r\n\r\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\r\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\r\n\r\n  useEffect(() => {\r\n    if (loading || isAuthenticated) {\r\n      return;\r\n    }\r\n    const fn = async () => {\r\n      await loginWithRedirect({\r\n        appState: {targetUrl: window.location.pathname}\r\n      });\r\n    };\r\n    fn();\r\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\r\n\r\n  const render = props =>\r\n    isAuthenticated === true ? <Component {...props} /> : null;\r\n\r\n  return <Route path={path} render={render} {...rest} />;\r\n};\r\n\r\nexport default PrivateRoute;","import React from 'react'\r\nimport {Table} from 'react-bootstrap'\r\nimport formatTime from '../../../utils/formatTime';\r\n\r\nconst FixturesTable  = (props) => {\r\n    return (\r\n        <Table>\r\n            <thead>\r\n                <tr>\r\n                    <th colSpan=\"2\">Fixtures Needing Results</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.fixts.length > 0 ?\r\n                    props.fixts.map(fixt=>{\r\n                        return(\r\n                            <tr key={fixt.fixture_id} onClick={()=>props.setSelected(fixt)}> \r\n                                <td>\r\n                                    {formatTime(fixt.fixture.commence_time)}\r\n                                </td>\r\n                                <td>\r\n                                    {fixt.fixture.home_team +\" vs. \"+fixt.fixture.away_team}\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                        :\r\n                    <></>\r\n                }\r\n             \r\n            </tbody>\r\n        </Table>\r\n    )\r\n\r\n}\r\n\r\nexport default FixturesTable","function isEmpty(obj) {\r\n    return Object.keys(obj).length === 0;\r\n};\r\nexport default isEmpty;","\r\n\r\nimport React, {useState} from 'react';\r\nimport { Form, Card, Col, Button, Alert} from 'react-bootstrap';\r\nimport isEmpty from '../../../utils/isEmpty';\r\n\r\nconst EnterResult = (props) => {\r\n    const [homeScore, setHomeScore] = useState();\r\n    const [awayScore, setAwayScore] = useState();\r\n    const [error, setError] = useState();\r\n    \r\n    //Update fixture results  in database\r\n    const updateFixture = async () => {\r\n        //api parameters to update results\r\n        let body = {\r\n            fixt_id : props.fixt.fixture_id,\r\n            results :  {     \r\n                home_score : homeScore, \r\n                away_score : awayScore\r\n            }\r\n        };\r\n        const url ='https://api.lineleaders.net/fixtures/updateResults'\r\n        const options = {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json;charset=UTF-8'\r\n            }, \r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        //call api\r\n        fetch(url, options)\r\n            .then(response=> {\r\n                props.removeFixt(props.fixt.fixture_id);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    //function to add results to fixture and update database \r\n    const checkResults = () => {\r\n        //make sure scores are valid \r\n        if(isNaN(homeScore) || isNaN(awayScore) || awayScore < 0 || homeScore < 0){\r\n            setError(<Alert variant='danger'>Enter a valid score in order to save</Alert>)\r\n        }else{\r\n            setError()\r\n            //add to database\r\n            updateFixture();\r\n        } \r\n    }\r\n\r\n    return (    \r\n        <Card>\r\n            <Card.Header>\r\n                Enter Results\r\n            </Card.Header>\r\n            <Card.Body>\r\n                {!isEmpty(props.fixt) ? \r\n                    <Form> \r\n                        <Form.Row> \r\n                            <Col> \r\n                                <Form.Control type=\"number\" onChange={(e)=>setAwayScore(e.target.value)}></Form.Control>\r\n                            </Col>\r\n                            <Form.Label column>{props.fixt.fixture.away_team}</Form.Label>\r\n                        </Form.Row>\r\n                        <Form.Row> \r\n                            <Col> \r\n                                <Form.Control type=\"number\"  onChange={(e)=>setHomeScore(e.target.value)}></Form.Control>\r\n                            </Col>\r\n                            <Form.Label column>{props.fixt.fixture.home_team}</Form.Label>\r\n                        </Form.Row>\r\n                        <Form.Row> \r\n                            {error}\r\n                            <Button onClick={()=>checkResults()}>Save Results</Button>\r\n                        </Form.Row>\r\n                        \r\n                    </Form>\r\n                        :\r\n                    <></>\r\n                }\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default EnterResult\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport FixturesTable from './FixturesTable';\r\nimport EnterResult from './EnterResult';\r\n\r\nconst NeedResultsPage = () => {\r\n    const [needResults, setNeedResults] = useState([]);\r\n    const [selectedFixt, setSelectedFixt] = useState({});\r\n    \r\n    //Run on render\r\n    useEffect(()=>{\r\n        const fetch_needsResults = async()=>{\r\n            const response = await fetch('https://api.lineleaders.net/fixtures/needResults');\r\n            const fixts = await response.json();\r\n            setNeedResults(fixts);\r\n        }\r\n\r\n        fetch_needsResults()\r\n    },[])\r\n\r\n    const removeFixt = (id) => { \r\n        setSelectedFixt({});\r\n        let index = needResults.findIndex(fixt => fixt.fixture_id === id)\r\n        let tmp = [...needResults];\r\n        tmp.splice(index, 1);\r\n        setNeedResults(tmp);\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={8}>\r\n                <FixturesTable fixts={needResults} setSelected={setSelectedFixt}/>\r\n            </Col>\r\n            <Col md={4}> \r\n                <EnterResult fixt={selectedFixt} removeFixt={removeFixt}/>\r\n            </Col>\r\n        </Row>   \r\n    )\r\n\r\n}\r\n\r\nexport default NeedResultsPage\r\n\r\n","import React, {useState} from 'react'\r\nimport {Row} from 'react-bootstrap';\r\n\r\n//Components\r\nimport CreateContest from '../forms/createContest/CreateContest';\r\nimport AdminSideBar from '../navs/AdminSideBar';\r\nimport NeedResultsPage from '../admin/fixtureResults/NeedResultsPage';\r\nconst AdminPage = () => {\r\n    const [component, setComponent] = useState(<></>)\r\n\r\n    const close = () => {\r\n        setComponent(<></>)\r\n    }\r\n\r\n    return (\r\n        <Row>   \r\n            <NeedResultsPage />\r\n        </Row>\r\n    )\r\n\r\n}\r\n\r\nexport default AdminPage","import React from 'react';\r\nimport {Table, Button} from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\n\r\nconst MyLiveContests = (props) => {\r\n\r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Contest Name</th>\r\n                    <th>Style</th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.contests.map(contest=>(\r\n                    <tr key={contest.intContestID}>\r\n                        <td>{contest.strContestName}</td>\r\n                        <td>{contest.strContestType}</td>\r\n                        <th>{contest.decEntry}</th>\r\n                        <td>\r\n                            <LinkContainer to={\"/live-contest/\"+contest.intContestID+\"/entry/\"+contest.intContestPlayerID}>\r\n                                <Button>\r\n                                    Open\r\n                                </Button>\r\n                            </LinkContainer>    \r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n\r\n}\r\n\r\nexport default MyLiveContests","// Run calcTime every second\r\nlet updateStartCountdown = (date, i) => {\r\n    const weekday =[\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\",\"Sun\"];\r\n    let newdate = new Date(date);\r\n    let now = new Date().getTime();\r\n    let start = new Date(date).getTime();\r\n    let timeleft = start - now;\r\n    let day = new Date(date).getDay();\r\n    let hour = new Date(date).getHours();\r\n    let ampm = hour >= 12 ? 'pm' : 'am';\r\n    if(hour > 12){\r\n        hour -= 12\r\n    }\r\n    \r\n    // Calculating the days, hours, minutes and seconds left\r\n    let days = Math.floor(timeleft / (1000 * 60 * 60 * 24));\r\n    let hours = Math.floor((timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    let minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));\r\n    let seconds = Math.floor((timeleft % (1000 * 60)) / 1000);\r\n    \r\n    let countdown=\"\";\r\n    // Display the message when countdown is over\r\n    if (timeleft < 0) {\r\n        countdown = \"TIME UP!!\";\r\n    }else{\r\n        if(days < 1){\r\n            countdown = hours+\":\"+ minutes+\":\"+ seconds;\r\n        }else if(days <= 6){\r\n            countdown = weekday[day-1]+\" \"+hour+ampm;\r\n        }else{\r\n            countdown = newdate.getMonth()+1+\"/\"+newdate.getDate()+\" \"+hour+ampm;\r\n\r\n\r\n        }\r\n    }; \r\n\r\n    let elementID=\"countdown\"+i;\r\n    document.getElementById(elementID).innerHTML = countdown;    \r\n};\r\n\r\nexport default updateStartCountdown;","import React, { useEffect} from 'react'\r\nimport {Table} from 'react-bootstrap';\r\nimport updateStartCountdown from '../../../utils/startCountdown';\r\n\r\nconst MyUpcomingContests = (props) => {\r\n    let contests = props.contests;\r\n\r\n    //Effect to update countdown \r\n    useEffect(()=>{\r\n        if(contests.length > 0){\r\n            var countdowns = setInterval(()=>{\r\n                contests.forEach((contest, i)=>{\r\n                    updateStartCountdown(contest.dtmStart, i);\r\n                })\r\n            },1000)\r\n        }\r\n\r\n        //Cleanup interval on component unmount\r\n        return function cleanup() {\r\n            clearInterval(countdowns);       \r\n        };\r\n    });\r\n\r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Contest Name</th>\r\n                    <th>Live In</th>\r\n                    <th>Game Style</th>\r\n                    <th>Entry Fee</th>\r\n                    <th>Prizes</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.contests.map((contest, i)=>(\r\n                    <tr key={contest.intContestID+i}>\r\n                        <td>{contest.strContestName}</td>\r\n                        <td id={\"countdown\"+i}></td>\r\n                        <td>{contest.strContestType}</td>\r\n                        <td>${contest.decEntryFee}</td>\r\n                        <td>${contest.decPrizePool}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default MyUpcomingContests","import React from 'react'\r\nimport {Table} from 'react-bootstrap';\r\n\r\nconst MyHistoryContests = (props) => {\r\n\r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Contest Name</th>\r\n                    <th>Style</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.contests.map(contest=>(\r\n                    <tr key={contest.intContestID}>\r\n                        <td>{contest.strContestName}</td>\r\n                        <td>{contest.strContestType}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n\r\n}\r\n\r\nexport default MyHistoryContests","import React from 'react';\r\nimport {Modal} from 'react-bootstrap';\r\n\r\nconst ContestDetails = (props) => {\r\n    let contest = props.contest;\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={props.onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Contest Details</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Type: {contest.contestType}</p>\r\n                <p>ID: {contest.contestID}</p>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n\r\n}\r\n\r\nexport default ContestDetails","import React, { useState, useEffect } from 'react';\r\nimport {Tabs, Tab, Spinner} from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\n//Components \r\nimport MyLiveContests from '../individual/MyContests/MyLiveContests';\r\nimport MyUpcomingContests from '../individual/MyContests/MyUpcomingContests';\r\nimport MyHistoryContests from '../individual/MyContests/MyHistoryContests';\r\n\r\nconst ContestsPage = (props) => {\r\n    const [contests, setContests] = useState([]);\r\n    const [liveContests, setLiveContests] = useState([]);\r\n    const [upcomingContests, setUpcomingContests] = useState([]);\r\n    const [historyContests, setHistoryContests] = useState([]);\r\n    const [display, setDisplay] = useState(false);\r\n\r\n    //Set display to true after 3 seconds\r\n    setTimeout(function() {\r\n        setDisplay(true)\r\n    }, 1000);\r\n\r\n    useEffect(()=>{\r\n        const fetchMyContests = async ()=> {\r\n            const response = await fetch('https://api.lineleaders.net/contests/myContests?ID='+props.accountID);\r\n            const contests = await response.json();\r\n            setContests(contests);\r\n        }\r\n\r\n        fetchMyContests();\r\n    },[props])\r\n\r\n\r\n    useEffect(()=>{\r\n        if(contests.length > 0){\r\n            let active = [];\r\n            let upcoming = [];\r\n            let history = [];\r\n            let count = 0;\r\n\r\n            contests.forEach(contest => {\r\n                //upcoming (Or open in DB)\r\n                if(contest.intContestStatusID == 1){\r\n                    upcoming.push(contest)\r\n                }\r\n                // active\r\n                else if(contest.intContestStatusID == 2){\r\n                    active.push(contest)\r\n                }\r\n                // history (complete)\r\n                else if(contest.intContestStatusID == 3){\r\n                    history.push(contest)\r\n                }\r\n                count++;\r\n            })\r\n            if(count == contests.length ){\r\n                setLiveContests(active);\r\n                setUpcomingContests(upcoming);\r\n                setHistoryContests(history);            \r\n            }\r\n        }\r\n    },[contests])\r\n\r\n    if(contests.length > 0 && display===true){ \r\n\r\n        return (\r\n            <>\r\n                <h3>MY CONTESTS</h3>\r\n                <Tabs fill defaultActiveKey=\"live\" id=\"contestsTab\">\r\n                    <Tab eventKey=\"live\" title=\"LIVE\">\r\n                        <MyLiveContests contests={liveContests} />\r\n                    </Tab>  \r\n                    <Tab eventKey=\"upcoming\" title=\"UPCOMING\">\r\n                        <MyUpcomingContests contests={upcomingContests} />\r\n                    </Tab>\r\n                    <Tab eventKey=\"history\" title=\"HISTORY\">\r\n                        <MyHistoryContests contests={historyContests} />\r\n                    </Tab>\r\n                </Tabs>\r\n            </>\r\n        )\r\n    }else return (\r\n        <>\r\n            <Spinner animation=\"border\"/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        accountID: state.user.ID\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ContestsPage);","const formatCurrency = (num) => {\r\n    let formatted = Number(num).toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    return formatted;\r\n}  \r\n\r\nexport default formatCurrency;","import React, {useState, useEffect} from 'react';\r\nimport {Row, Col, Table, Button} from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport ContestDetails from './ContestDetails';\r\nimport updateStartCountdown from '../../../utils/startCountdown';\r\n\r\n/*  Contest Object Structure\r\n        {\r\n            contestID: Number, \r\n            contestLeagues: [\r\n                {\r\n                    leagueID: Number, \r\n                    leagueName: String\r\n                }   \r\n            ],\r\n            entry: Number, \r\n            bankroll: Number, \r\n            prizepool: Number,\r\n            start: Date, \r\n            end: Date, \r\n            minPlayers: Number, \r\n            maxPlayers: Number\r\n        }\r\n*/\r\n\r\n/*    NOTES \r\n\r\n        - min + max players are hardcoded currently \r\n        - Start time needs to be countdown within 24 hrs or day + time if > 24 hrs away\r\n        - Make sure time is being translated to the right timezone\r\n*/\r\n\r\nconst OpenContests = (props) => {\r\n    const contests = props.contests;\r\n    const [expandedContest, setExpandedContest] = useState({});\r\n    const [showDetail, setShowDetail] = useState(false);\r\n    const handleClose = () => setShowDetail(false);\r\n    const handleShow = () => setShowDetail(true);\r\n\r\n    //Enter contest \r\n    const enterContest = async (contestID) => {\r\n        const body = {\r\n            contestID: contestID,\r\n            accountID: props.accountID\r\n        };\r\n\r\n        const opts = {\r\n            method: \"POST\",\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"        \r\n            }\r\n        }\r\n\r\n        const url = \"https://api.lineleaders.net/contests/enter\";\r\n\r\n        //enter contest\r\n        fetch(url, opts)\r\n        .then(response=> {\r\n            console.log(response.json())\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    //Effect to update countdown \r\n    useEffect(()=>{\r\n        if(contests.length > 0){\r\n            var countdowns = setInterval(()=>{\r\n                contests.forEach((contest, i)=>{\r\n                    updateStartCountdown(contest.start, i);\r\n                })\r\n            },1000)\r\n        }\r\n\r\n        //Cleanup interval on component unmount\r\n        return function cleanup() {\r\n            clearInterval(countdowns);       \r\n        };\r\n    });\r\n\r\n    //Handle open detail\r\n    const handleOpenDetail = async (contest) => {\r\n        await setExpandedContest(contest)\r\n        setShowDetail(true)\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <h3>Open Contests</h3>\r\n                <Table responsive>  \r\n                    <thead>\r\n                        <tr>\r\n                            <th>Contest Name</th>\r\n                            <th className=\"hidden-md\">Style</th>\r\n                            <th>Entry Fee</th>\r\n                            <th>Prizepool</th>\r\n                            <th className=\"hidden-md\">Entries</th>\r\n                            <th className=\"hidden-md\">Bankroll</th>\r\n                            <th>Start</th>\r\n                            <th className=\"hidden-md\"></th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>               \r\n                    <tbody>   \r\n                        {contests.map((contest,i)=>{\r\n                            return(\r\n                                <tr key={contest.contestID}>\r\n                                    <td>{contest.name}</td>\r\n                                    <td className=\"hidden-md\">{contest.contestType}</td>\r\n                                    <td>${contest.entry}</td>\r\n                                    <td>${contest.prizepool}</td>\r\n                                    <td className=\"hidden-md\">Entries(need calculated)</td>\r\n                                    <td className=\"hidden-md\">${contest.bankroll}</td>\r\n                                    <td id={\"countdown\"+i}></td>\r\n                                    <td className=\"hidden-md\"><Button onClick={()=>handleOpenDetail(contest)}>Details</Button></td>\r\n                                    <td><Button onClick={()=>enterContest(contest.contestID)}>Enter</Button></td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </Table>            \r\n            </Col> \r\n            <ContestDetails contest={expandedContest} show={showDetail} onHide={handleClose}/> \r\n        </Row>     \r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        accountID: state.user.ID\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(OpenContests);","import React from 'react'\r\nimport {Table} from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport formatCurrency from '../../../utils/formatCurrency';\r\nimport '../../../css/global/tables.css'\r\n\r\nconst Leaderboard = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Place</th>\r\n                    <th>Username</th>\r\n                    <th>Bankroll</th>\r\n                    <th>W/L</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.leaderboards.map((contestant, i) => {\r\n                    let record =\"\";\r\n                    let bankroll = formatCurrency(contestant.bankroll)\r\n                    if(contestant.p > 0){\r\n                        record = contestant.w +\"-\"+ contestant.l +\"-\"+ contestant.p\r\n                    }else{\r\n                        record = contestant.w +\"-\"+ contestant.l\r\n                    }\r\n                    return(\r\n                        <tr key={contestant.id}>\r\n                            <td>{i+1}</td>\r\n                            <td>{contestant.email}</td>\r\n                            <td>{bankroll}</td>\r\n                            <td>{record}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      leaderboards: state.contest.leaderboards,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Leaderboard);\r\n","//function to convert odds to american\r\nconst convertOdds = (odds) => {\r\n    let parsedOdds = parseFloat(odds);\r\n    let americanOdds =\"\";\r\n    if(parsedOdds === 2){\r\n        americanOdds = 'EVEN'\r\n    }else if(parsedOdds < 2){\r\n        americanOdds = Math.round(-100/(parsedOdds-1))\r\n    }else if(parsedOdds > 2){\r\n        americanOdds = \"+\"+Math.round((parsedOdds-1)*100)\r\n    }\r\n    return americanOdds;\r\n}\r\n\r\nexport default convertOdds;","import React from 'react'\r\nimport convertOdds from '../../../../utils/convertOdds';\r\nimport formatTime from '../../../../utils/formatTime';\r\n\r\nconst Leg = (props) => {\r\n    let leg = props.leg\r\n    let time = formatTime(leg.fixture.time)\r\n\r\n    if(leg.line.type === \"Moneyline\"){\r\n        return (\r\n            <td>\r\n                    <b>{leg.line.team.type === \"Draw\" ? \r\n                        leg.line.team.type\r\n                            :\r\n                        leg.line.team.name\r\n                    }</b>\r\n                    <br/>{leg.fixture.fixture}\r\n                    <br/>{time}\r\n            </td>\r\n        )\r\n    }else if(leg.line.type === \"Spread\"){\r\n        let line;\r\n        if(leg.line.line > 0){\r\n            line = leg.line.line;\r\n        }else{\r\n            line = leg.line.line;\r\n        }\r\n        return (\r\n            <td>\r\n                <b>{leg.line.team.name + \" \" + line}</b>\r\n                <br/>{leg.fixture.fixture}\r\n                <br/>{time}\r\n            </td>\r\n        )\r\n    }else if(leg.line.type === \"Total\"){\r\n        return (\r\n            <td>\r\n                <b>{leg.line.bet + \" \" + leg.line.line}</b>\r\n                <br/>{leg.fixture.fixture}\r\n                <br/>{time}\r\n            </td>\r\n        )\r\n    }\r\n    return(\r\n        <></>\r\n    )\r\n}\r\n\r\nexport default Leg","import React from 'react';\r\nimport {Table } from 'react-bootstrap';\r\nimport convertOdds from '../../../../utils/convertOdds';\r\nimport Leg from './Leg';\r\nimport '../../../../css/betsTable.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst SettledBets = (props) => {    \r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Type</th>\r\n                    <th>Line(s)</th>\r\n                    <th>Odds</th>\r\n                    <th>Risk</th>\r\n                    <th>Win</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.settledBets.map(bet=>{\r\n                    if(bet.type === \"Straight\"){\r\n                        const leg = bet.legs[0];\r\n                        //calc win field\r\n                        let win = bet.odds - 1;\r\n                        win = (win * bet.wager).toFixed(2)\r\n                        return(\r\n                            <tr className={\"bet\"+bet.result}>\r\n                                <td>{bet.type}</td>\r\n                                <Leg leg={leg} />\r\n                                <td>{convertOdds(bet.odds)}</td>\r\n                                <td>{\"$\"+parseFloat(bet.wager).toFixed(2)}</td>\r\n                                {bet.result === \"W\" ? <td>{\"+$\"+win}</td> :<></>}\r\n                                {bet.result === \"L\" ? <td>{\"-$\"+parseFloat(bet.wager).toFixed(2)}</td> :<></>}\r\n                                {bet.result === \"P\" ? <td>{\"-\"}</td> :<></>}\r\n                            </tr>\r\n                        )\r\n                    }else{\r\n                        return <></>;\r\n                    }\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settledBets: state.contest.settledBets\r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps)(SettledBets);\r\n","import React from 'react';\r\nimport {Table } from 'react-bootstrap';\r\nimport convertOdds from '../../../../utils/convertOdds';\r\nimport Leg from './Leg';\r\nimport '../../../../css/betsTable.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst OpenBets = (props) => {    \r\n    return (\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Type</th>\r\n                    <th>Line(s)</th>\r\n                    <th>Odds</th>\r\n                    <th>Risk</th>\r\n                    <th>Win</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.openBets.map(bet=>{\r\n                    if(bet.type === \"Straight\"){\r\n                        const leg = bet.legs[0];\r\n                        //calc win field\r\n                        let win = bet.odds - 1;\r\n                        win = (win * bet.wager).toFixed(2)\r\n                        return(\r\n                            <tr className={\"openBet\"}>\r\n                                <td>{bet.type}</td>\r\n                                <Leg leg={leg} />\r\n                                <td>{convertOdds(bet.odds)}</td>\r\n                                <td>{\"$\"+parseFloat(bet.wager).toFixed(2)}</td>\r\n                                <td>{\"$\"+win}</td>\r\n                            </tr>\r\n                        )\r\n                    }else{\r\n                        return <></>;\r\n                    }\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        openBets: state.contest.openBets\r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps)(OpenBets);\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Col, Form, Table} from 'react-bootstrap';\r\nimport formatTime from '../../../../utils/formatTime';\r\n\r\nconst Bet = (props) => {\r\n    const [risk, setRisk] = useState(\"\");\r\n    const [win, setWin] = useState(\"\");\r\n    const bet = props.bet;\r\n    //index of bet in array\r\n    const i = props.i;\r\n\r\n    //Run whenever risk is set, set win variable and setWager on bet in array \r\n    useEffect(()=>{\r\n        if(risk !== \"\"){\r\n            let odds = parseFloat(bet.odds.american);\r\n            let tmpRisk = parseFloat(risk);\r\n            let tmpWin;\r\n            if(odds > 0){\r\n                tmpWin = parseFloat(tmpRisk*parseFloat(odds)/100).toFixed(2);\r\n            }else{\r\n                odds = Math.abs(odds);\r\n                let denom = odds/100;\r\n                tmpWin = parseFloat(tmpRisk/ denom).toFixed(2);\r\n            }\r\n            setWin(tmpWin);\r\n        }else{\r\n            setWin(\"\")\r\n        }\r\n\r\n        props.addWager(bet.id, risk)\r\n\r\n    },[risk])\r\n\r\n    //Function to toggle bet details \r\n    const toggleDetails = (i) => {\r\n        let detailRows = document.getElementsByClassName(\"betDetails\"+i);\r\n        let arrow = document.getElementById(\"arrow\"+i);\r\n\r\n        for(let i =0; i < detailRows.length; i++){\r\n            if(detailRows[i].style.display === 'none'){\r\n                detailRows[i].style.display = '';\r\n                arrow.classList.remove(\"right\");\r\n                arrow.classList.add(\"down\");\r\n            }else{\r\n                detailRows[i].style.display = 'none';\r\n                arrow.classList.remove(\"down\");\r\n                arrow.classList.add(\"right\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Table className=\"bet\">\r\n            <tbody>\r\n                <tr>\r\n                    {(bet.type === \"Spread\") ? \r\n                        <td onClick={()=>toggleDetails(i)}><i className=\"arrow right\" id={\"arrow\"+i} ></i> {bet.bet+\" \"+bet.handicap}</td>\r\n                    : \r\n                    (bet.type === \"Total\") ?\r\n                        <td onClick={()=>toggleDetails(i)}><i className=\"arrow right\" id={\"arrow\"+i} ></i> {bet.bet+\" \"+bet.total} </td>\r\n                    :\r\n                        <td onClick={()=>toggleDetails(i)}><i className=\"arrow right\" id={\"arrow\"+i} ></i> {bet.bet}</td>\r\n                    }\r\n                    <td className=\"odds\">{bet.odds.american} <i onClick={()=>props.removeBets([bet.id])}>&times;</i></td> \r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={2}>{bet.type}</td>\r\n                </tr>\r\n                <tr style={{display:'none'}} className={\"betDetails\"+i}>\r\n                    <td  colSpan={2}>{bet.fixture}</td>\r\n                </tr>\r\n                <tr style={{display:'none'}} className={\"betDetails\"+i}>\r\n                    <td colSpan={2}>{formatTime(bet.time)}</td>\r\n                </tr>\r\n                {props.slipType === \"Straight\" ? \r\n                    <tr>\r\n                        <td colSpan={2}>\r\n                            <Form>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Control type=\"number\" placeholder=\"Risk\" value={risk} onChange={(e)=>setRisk(e.target.value)}/>\r\n                                    </Form.Group> \r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Control type=\"text\"  tabIndex=\"-1\" placeholder=\"Win\" value={win} readOnly/>\r\n                                    </Form.Group> \r\n                                </Form.Row>\r\n                            </Form>\r\n                        </td>   \r\n                    </tr>\r\n                    :\r\n                    <></>\r\n                }    \r\n            </tbody>\r\n        </Table>    \r\n    )\r\n}\r\n\r\nexport default Bet","let model = {\r\n    type: String, // Straight-Parlay-Teaser-RoundRobin\r\n    wager: Number, // Wager amount\r\n    odds: Number, // Total odds for bet\r\n    result: String //W-L\r\n}\r\n\r\nlet Leg = {\r\n    fixture: {\r\n        fixtureID: Number, // id of fixture, \r\n        fixture: String, //Fixture\r\n        time: Number // Time in epoch\r\n    },\r\n    line: Object, // ML-Spread-Total-Prop \r\n    odds: Number, //Odds for leg\r\n    result: String\r\n}\r\n\r\nlet ML = {\r\n    type: \"Moneyline\",\r\n    team: {\r\n        type: String, // Home-Away-Draw\r\n        name: String, // team name\r\n    }\r\n}\r\n\r\nlet Spread = {\r\n    type: \"Spread\",\r\n    team: {\r\n        type: String, // Home-Away\r\n        name: String // team name\r\n    },\r\n    line: Number // Point spread,\r\n}\r\n\r\nlet Total = {\r\n    type: \"Total\",\r\n    bet: String, // Over-Under\r\n    line: Number // Score Line\r\n}\r\n\r\nexport{\r\n    model, ML, Spread, Total, Leg\r\n}\r\n","/*function to fetch bets by contest entry id\r\nformats bet into bets object containing open and settled bets\r\nreturns bets object\r\n*/\r\nconst fetchContestBets = async(entryid) => {\r\n    const response = await fetch('https://api.lineleaders.net/bets/byEntry?entryid='+entryid);\r\n    const json = await response.json();\r\n    //separate into open and settled and set redux state\r\n    \r\n    let bets = {\r\n        open : [],\r\n        settled : []\r\n    } \r\n\r\n    json.forEach(bet=>{\r\n        if(bet.result === \"W\"|| bet.result === \"L\" || bet.Result ===\"P\"){\r\n            bets.settled.push(bet);\r\n        }else{\r\n            bets.open.push(bet);\r\n        }\r\n    })\r\n    return bets;\r\n}\r\n\r\nexport default fetchContestBets;","import React from 'react'\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\n/* \r\nComponent takes following props\r\nshow - boolean to show or hide modal\r\nclose - function to set parent variable that handles display of modal to false\r\naction - call back funtion to action on clicking button\r\nbuttonText - text to display on button\r\nmessage - title text for modal\r\n*/\r\n\r\nconst ConfirmationModal = (props) => {\r\n    return (\r\n        <Modal show={props.show} onHide={props.close}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{props.message}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.close}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.action}>\r\n                    {props.buttonText}\r\n                </Button>\r\n                </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ConfirmationModal","import React, { useState } from 'react';\r\nimport {Card, Button, Alert} from 'react-bootstrap';\r\nimport '../../../../css/betslip.css';\r\nimport Bet from './Bet';\r\nimport {model, ML, Spread, Total, Leg} from '../../../../models/bet/bet';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport fetchContestBets from '../../../../api/bets/fetchContestBets';\r\nimport ConfirmationModal from '../../../shared/ConfirmationModal';\r\n\r\nconst BetSlip = (props) => {\r\n    const match = useRouteMatch();\r\n    const [error, setError] = useState();\r\n    const [showConfirm, setShowConfirm] = useState(false);\r\n    let bets = props.bets;\r\n    //State variable to hold slip type (straight, parlay, etc.)\r\n    const [slipType, setSlipType] = useState(\"Straight\")\r\n    const [records, setRecords] = useState([]);\r\n\r\n    //add wager amount to Straight bet \r\n    const addWager = (id, wager) => {\r\n        //find index\r\n        const index = bets.map(bet => bet.id).indexOf(id);\r\n        let tmpBets = bets;\r\n        tmpBets[index].wager = wager;\r\n        bets = tmpBets;\r\n    }\r\n\r\n    //Function to format straight bets in records for db storage\r\n    const formatStraightBet = (bet) =>{\r\n        //create instance of bet model obj and add properties\r\n        let betModel = {...model};\r\n        betModel.type = slipType;\r\n        betModel.wager = bet.wager;\r\n        betModel.odds = bet.odds.decimal;\r\n        betModel.result = \"\";\r\n        \r\n        //create instance of leg obj \r\n        let leg = {...Leg};\r\n\r\n        let legType = bet.type;\r\n        if(legType === \"Spread\"){\r\n            //create instance of spread line object \r\n            let spread = {...Spread}; \r\n            spread.team = {...spread.team}\r\n            spread.team.type = bet.team.type;\r\n            spread.team.name = bet.team.name;\r\n            spread.line = bet.handicap;\r\n            leg.fixture = {...leg.fixture}\r\n            leg.fixture.fixtureID = bet.fixtureID; \r\n            leg.fixture.fixture = bet.fixture; \r\n            leg.fixture.time = bet.time; \r\n            leg.line = spread;\r\n            leg.odds = bet.odds.decimal;\r\n            leg.result =\"\";\r\n        }else if(legType === \"3-Way Moneyline\"){\r\n            //create instance of ML line object\r\n            let ml = {...ML}; \r\n            ml.team = {...ml.team}\r\n            ml.team.type = bet.team.type;\r\n            ml.team.name = bet.team.name;\r\n            leg.fixture = {...leg.fixture}\r\n            leg.fixture.fixtureID = bet.fixtureID; \r\n            leg.fixture.fixture = bet.fixture; \r\n            leg.fixture.time = bet.time;             \r\n            leg.line = ml;\r\n            leg.odds = bet.odds.decimal; \r\n            leg.result =\"\";       \r\n        }else if(legType === \"Total\"){\r\n            //create instance of Total line object\r\n            let total = {...Total}; \r\n            total.bet = bet.bet;\r\n            total.line = bet.total;\r\n            leg.fixture = {...leg.fixture}\r\n            leg.fixture.fixtureID = bet.fixtureID; \r\n            leg.fixture.fixture = bet.fixture; \r\n            leg.fixture.time = bet.time; \r\n            leg.line = total;\r\n            leg.odds = bet.odds.decimal;\r\n            leg.result =\"\";\r\n        }\r\n\r\n        return {\r\n            contestPlayerID: match.params.entryid,\r\n            jsonBet: betModel,\r\n            leg: leg\r\n        };\r\n    }\r\n\r\n    //function to validate and confirm bets, then confirm placements of bets\r\n    const validateBets = async() => {\r\n        //check to make sure all bets contain valid wagers and combine wagers from all bets\r\n        let totalWagered = 0;\r\n        //object to hold error\r\n        let error = {\r\n            isError: false,\r\n            message: String\r\n        }\r\n\r\n        await bets.forEach(bet=>{\r\n            if(bet.wager > 0){\r\n                totalWagered = totalWagered + parseFloat(bet.wager);\r\n            }else{\r\n                error.isError = true;\r\n                error.message =\"Please enter a valid wager amount for all bets\";\r\n            }\r\n        })\r\n        //check totalWagered and validate that it is not less than available\r\n\r\n        if(totalWagered > props.available){\r\n            error.isError = true;\r\n            error.message = \"Cash Available: $\"+props.available;\r\n        }\r\n\r\n        //check for error and either insert bets or display error message\r\n        if(error.isError === true){\r\n            setError(<Alert variant='danger'>{error.message}</Alert>)\r\n            return;\r\n        }else{\r\n            //clear any error message, display confirmation box\r\n            setError();\r\n            setShowConfirm(true);\r\n\r\n            //determine type of bet(s) - straight,parlay,etc.\r\n            if(slipType === \"Straight\"){\r\n                let tmpRecords = [];\r\n                //format each bet and set records state array\r\n                bets.forEach(bet=>{\r\n                    let tmpModel = formatStraightBet(bet)\r\n                    tmpRecords.push(tmpModel);\r\n                })\r\n                \r\n                setRecords(tmpRecords);\r\n            }\r\n        }   \r\n    }\r\n\r\n    //Function to insert records into the database\r\n    const insertBetRecords = async() => {\r\n        //close modal\r\n        setShowConfirm(false);\r\n\r\n        //api parameters to create bets\r\n        const body = {\r\n            bets: records\r\n        }\r\n\r\n        const url ='https://api.lineleaders.net/bets/create';\r\n        const options = {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json;charset=UTF-8'\r\n            }, \r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        //call api and check res code\r\n        let response = await fetch(url, options);\r\n        let json = await response.json();\r\n\r\n        //if resources have been created, clear bets array\r\n        if(json.code === 201){\r\n            let ids = [];\r\n            bets.forEach(bet=>{\r\n                ids.push(bet.id);\r\n            })    \r\n            props.removeBets(ids);\r\n\r\n            let contestBets = await fetchContestBets(match.params.entryid);\r\n            props.setOpenBets(contestBets.open);\r\n            props.setSettledBets(contestBets.settled);\r\n        }\r\n    }\r\n\r\n    //Function to handle cancellation of bet submission\r\n    const handleCancellation = () => {\r\n        setRecords([]);\r\n        setShowConfirm(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card >\r\n                <Card.Header>Bet Slip</Card.Header>\r\n                <Card.Body>\r\n                    {bets.map((bet, i)=>{\r\n                    return(\r\n                            <Bet key={i} bet={bet} i={i} removeBets={props.removeBets} slipType={slipType} addWager={addWager}/>\r\n                        )\r\n                    })}\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    {error}\r\n                    <Button onClick={()=>validateBets()} variant=\"primary\">Place Bet(s)</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n            <ConfirmationModal close={handleCancellation} show={showConfirm} action={insertBetRecords} buttonText=\"Yes\" message={\"Are you ready to place your bets?\"}/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        available: state.contest.available,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return{\r\n        setOpenBets: bets => { dispatch({type: 'SET_OPEN_BETS', bets: bets })},      \r\n        setSettledBets: bets => { dispatch({type: 'SET_SETTLED_BETS', bets: bets })}\r\n    }\r\n  }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BetSlip);\r\n","//Function to check if handicap is number or string like \"0.0, -0.5\"\r\nlet formatHandicap = (handicap) => {\r\n    if(isNaN(handicap)){\r\n        let nums = handicap.split(\",\");\r\n        let total = (parseFloat(nums[0])+parseFloat(nums[1]));\r\n        let formatted = total / 2;\r\n        return(formatted);\r\n    }else{\r\n        return(handicap);\r\n    }\r\n};\r\n\r\nexport default formatHandicap;","import React from 'react';\r\nimport {Table, Row, Form, Col} from 'react-bootstrap';\r\nimport '../../../../../css/fixture.css';\r\nimport '../../../../../css/dropdownArrow.css'\r\nimport '../../../../../css/global/fixtures.css';\r\nimport convertOdds from '../../../../../utils/convertOdds';\r\nimport formatHandicap from '../../../../../utils/formatHandicap';\r\nimport isEmpty from '../../../../../utils/isEmpty';\r\n\r\nconst FootballFixts = (props) => {\r\n\r\n    //function to add bet \r\n    const addBet = (fixture, bettype) => {\r\n        let tmp = [...props.bets];\r\n        let bet = {\r\n            id : bettype+\"-\"+fixture.id,\r\n            time : fixture.time,\r\n            wager: Number,\r\n            fixture : fixture.away.name+\" vs \"+fixture.home.name,\r\n            fixtureID : fixture.id\r\n        };\r\n        //Format Bet\r\n        switch (bettype){\r\n            case \"away-spread\" : \r\n                 bet.bet = fixture.away.name;\r\n                 bet.odds = {\r\n                    american:convertOdds(fixture.odds.main.sp.game_lines.odds[3].odds),\r\n                    decimal:fixture.odds.main.sp.game_lines.odds[3].odds\r\n                }\r\n                 bet.handicap = formatHandicap(fixture.odds.main.sp.game_lines.odds[3].handicap);\r\n                 bet.type = \"Spread\";\r\n                 bet.team = {\r\n                     type: \"Away\",\r\n                     name: fixture.away.name\r\n                 }\r\n                break;\r\n            case \"away-ml\" : \r\n                bet.type = \"3-Way Moneyline\";\r\n                bet.bet = fixture.away.name;\r\n                bet.odds = {\r\n                    american:convertOdds(fixture.odds.main.sp.game_lines.odds[5].odds),\r\n                    decimal:fixture.odds.main.sp.game_lines.odds[5].odds\r\n                }\r\n                bet.team = {\r\n                    type: \"Away\",\r\n                    name: fixture.away.name\r\n                }\r\n            break;\r\n            case \"home-spread\" : \r\n                bet.bet = fixture.home.name;\r\n                bet.handicap = formatHandicap(fixture.odds.main.sp.game_lines.odds[0].handicap);\r\n                bet.odds = {\r\n                    american:convertOdds(fixture.odds.main.sp.game_lines.odds[0].odds),\r\n                    decimal:fixture.odds.main.sp.game_lines.odds[0].odds\r\n                }\r\n                bet.type = \"Spread\";  \r\n                bet.team = {\r\n                    type: \"Home\",\r\n                    name: fixture.home.name\r\n                }\r\n            break;\r\n            case \"home-ml\" : \r\n                bet.bet = fixture.home.name;\r\n                bet.odds = {\r\n                    american:convertOdds(fixture.odds.main.sp.game_lines.odds[2].odds),\r\n                    decimal:fixture.odds.main.sp.game_lines.odds[2].odds\r\n                }\r\n                bet.type = \"3-Way Moneyline\";\r\n                bet.team = {\r\n                    type: \"Home\",\r\n                    name: fixture.home.name\r\n                }\r\n                break;\r\n            case \"over\" : \r\n                let over = fixture.odds.main.sp.game_lines.odds[1].handicap.match(/[+-]?\\d+(\\.\\d+)?/g);\r\n                bet.odds = {\r\n                    american:convertOdds(fixture.odds.main.sp.game_lines.odds[1].odds),\r\n                    decimal:fixture.odds.main.sp.game_lines.odds[1].odds  \r\n                };\r\n                bet.type = \"Total\";\r\n                bet.bet = \"Over\";\r\n                bet.total = over;\r\n            break;\r\n            case \"under\" : \r\n                let under = fixture.odds.main.sp.game_lines.odds[4].handicap.match(/[+-]?\\d+(\\.\\d+)?/g);\r\n\r\n                bet.odds = {\r\n                    american:convertOdds(fixture.odds.main.sp.game_lines.odds[4].odds),\r\n                    decimal:fixture.odds.main.sp.game_lines.odds[4].odds  \r\n                }\r\n                bet.type = \"Total\";\r\n                bet.bet = \"Under\";\r\n                bet.total = under\r\n            break;\r\n            default : break; \r\n        }\r\n        tmp.push(bet);\r\n        props.setBets(tmp);\r\n    }\r\n    \r\n    //Funtion to either add or remove bet to/from bets array\r\n    const handleBetClick = (fixture, bettype) => {\r\n        let tmpBets = [...props.bets];\r\n        const id = bettype+\"-\"+fixture.id;\r\n        const element = document.getElementById(id);\r\n        const index = tmpBets.map(bet => bet.id).indexOf(id);\r\n\r\n        if(index > -1){\r\n            props.removeBet(bettype+\"-\"+fixture.id)\r\n        }else{\r\n            addBet(fixture, bettype);\r\n            element.classList.add(\"selected-bet\");        \r\n        } \r\n    }\r\n\r\nreturn (\r\n    <Row>\r\n        <Col md={12}>\r\n            <Table key={props.fixtures[0].league.leagueID} responsive>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>{props.league.name}</th>\r\n                    </tr>\r\n                    {props.fixtures.map(fixture=>{\r\n                        let formattedTime = props.formatTime(fixture.time);\r\n                        if(!isEmpty(fixture.odds.main.sp)){\r\n                            return (\r\n                                <tr key={fixture.id} className=\"fixtRow\">\r\n                                    <td className=\"fixtTime\">{formattedTime}</td>\r\n                                    <td className=\"nestedFixt\">\r\n                                        <Table>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Fixture</th>\r\n                                                    <th>Spread</th>\r\n                                                    <th>Win</th>\r\n                                                    <th>Total</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td>{fixture.away.name}</td>\r\n                                                        {typeof fixture.odds.main.sp.game_lines.odds[3] == 'object'  ?\r\n                                                            <td className=\"line\" id={\"away-spread-\"+fixture.id} onClick={()=>handleBetClick(fixture,\"away-spread\")}>\r\n                                                                {formatHandicap(fixture.odds.main.sp.game_lines.odds[3].handicap)+\" (\"+convertOdds(fixture.odds.main.sp.game_lines.odds[3].odds)+\")\"}\r\n                                                            </td>\r\n                                                            :\r\n                                                            <td>-</td>\r\n                                                        }\r\n                                                        {typeof fixture.odds.main.sp.game_lines.odds[5] == 'object'  ?\r\n                                                            <td className=\"line\" id={\"away-ml-\"+fixture.id} onClick={()=>handleBetClick(fixture,\"away-ml\")}>\r\n                                                                {convertOdds(fixture.odds.main.sp.game_lines.odds[5].odds)}\r\n                                                            </td>\r\n                                                            :\r\n                                                            <td>-</td>\r\n                                                        }\r\n                                                        {typeof fixture.odds.main.sp.game_lines.odds[1] == 'object'  ?\r\n                                                            <td className=\"line\" id={\"over-\"+fixture.id} onClick={()=>handleBetClick(fixture,\"over\")}>\r\n                                                                {fixture.odds.main.sp.game_lines.odds[1].handicap+\" (\"+convertOdds(fixture.odds.main.sp.game_lines.odds[1].odds)+\")\"}\r\n                                                            </td>\r\n                                                            :\r\n                                                            <td>-</td>\r\n                                                        }\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>{fixture.home.name}</td>                      \r\n                                                        {typeof fixture.odds.main.sp.game_lines.odds[0] == 'object'  ?\r\n                                                            <td className=\"line\" id={\"home-spread-\"+fixture.id} onClick={()=>handleBetClick(fixture,\"home-spread\")}>\r\n                                                                {formatHandicap(fixture.odds.main.sp.game_lines.odds[0].handicap)+\" (\"+convertOdds(fixture.odds.main.sp.game_lines.odds[0].odds)+\")\"}\r\n                                                            </td>\r\n                                                            :\r\n                                                            <td>-</td>\r\n                                                        }\r\n                                                        {typeof fixture.odds.main.sp.game_lines.odds[2] == 'object'  ?\r\n                                                            <td className=\"line\" id={\"home-ml-\"+fixture.id} onClick={()=>handleBetClick(fixture,\"home-ml\")}>\r\n                                                                {convertOdds(fixture.odds.main.sp.game_lines.odds[2].odds)}\r\n                                                            </td>\r\n                                                            :\r\n                                                            <td>-</td>\r\n                                                        }\r\n                                                        {typeof fixture.odds.main.sp.game_lines.odds[4] == 'object'  ?\r\n                                                            <td className=\"line\" id={\"under-\"+fixture.id} onClick={()=>handleBetClick(fixture,\"under\")}>\r\n                                                                {fixture.odds.main.sp.game_lines.odds[4].handicap+\" (\"+convertOdds(fixture.odds.main.sp.game_lines.odds[4].odds)+\")\"}\r\n                                                            </td> \r\n                                                            :\r\n                                                            <td>-</td>\r\n                                                        }\r\n                                                    </tr> \r\n                                                </tbody>\r\n                                        </Table>\r\n                                    </td>     \r\n                                </tr>\r\n                            )\r\n                        }else{\r\n                            return(\r\n                                <></>\r\n                            )\r\n                        }\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        </Col>\r\n    </ Row>\r\n)\r\n}\r\n\r\nexport default FootballFixts","import React, {useState} from 'react';\r\nimport {Row, Form, Col} from 'react-bootstrap';\r\nimport '../../../../css/fixture.css';\r\nimport '../../../../css/dropdownArrow.css'\r\nimport BetSlip from '../BetSlip/BetSlip';\r\nimport formatTime from '../../../../utils/formatTime';\r\nimport FootballFixts from './Fixtures/FootballFixts';\r\n\r\nconst Book = (props) => {\r\n    // const [leagueFixtures, setLeagueFixtures] = useState([]);\r\n    const [leagueDisp, setLeaguesDisp] = useState([]);\r\n    const [bets, setBets] = useState([]);\r\n\r\n    //function to remove bet\r\n    const removeBet = (id) => {\r\n        console.log(id)\r\n        //get temp array\r\n        let tmpBets = [...bets];\r\n        //get index \r\n        const index = tmpBets.map(bet => bet.id).indexOf(id);\r\n        //get element by id\r\n        const element = document.getElementById(id);\r\n        //remove class\r\n        element.classList.remove(\"selected-bet\");     \r\n        //remove bet from array   \r\n        tmpBets.splice(index, 1);\r\n        console.log(tmpBets)\r\n        //set bets array\r\n        setBets(tmpBets);\r\n    }\r\n    //function to remove bets after submission, takes array of ids\r\n    const removeBets = (ids) => {\r\n        //get temp array\r\n        let tmpBets = [...bets];\r\n        ids.forEach(id=> {\r\n            //get index \r\n            const index = tmpBets.map(bet => bet.id).indexOf(id);\r\n            //get element by id\r\n            const element = document.getElementById(id);\r\n            //remove class\r\n            element.classList.remove(\"selected-bet\");     \r\n            //remove bet from array   \r\n            tmpBets.splice(index, 1);\r\n            console.log(tmpBets)\r\n            //set bets array\r\n        })\r\n        setBets(tmpBets);\r\n\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={8} sm={12}>\r\n                <Form>\r\n                    <Form.Row>                    \r\n                            <Col>\r\n                                <Form.Control as=\"select\" onChange={(e)=>setLeaguesDisp(e.target.value)}>\r\n                                    <option>All Leagues</option>\r\n                                    {props.leagues.map(league=>{\r\n                                        return (\r\n                                            <option key={league.intLeagueID} value={league.intLeagueID}>{league.strLeagueName}</option>\r\n                                        )\r\n                                    })}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Row>\r\n                </Form>\r\n                {props.upcoming.map(league=>{\r\n                    let leagueobj = league.fixtures[0].league\r\n                    return(\r\n                        //Football\r\n                        parseInt(league.fixtures[0].sport_id) === 12 ?\r\n                            <FootballFixts fixtures={league.fixtures} bets={bets} removeBet={removeBet} setBets={setBets} league={leagueobj} formatTime={formatTime}/>\r\n                                :\r\n                            <></>\r\n                    )\r\n                })}\r\n            </Col>\r\n            <Col md={4} sm={12}>\r\n                <BetSlip bets={bets} removeBets={removeBets}/>\r\n            </Col>\r\n        </ Row>\r\n    )\r\n}\r\n\r\nexport default Book","import React, {} from 'react';\r\nimport formatTime from '../../utils/formatTime';\r\nimport isEmpty from '../../utils/isEmpty';\r\nimport formatHandicap from '../../utils/formatHandicap';\r\nimport '../../css/global/fixtures.css';\r\n\r\nconst Fixture = (props) => {\r\n    let fixt = props.fixt;\r\n    let formattedTime = formatTime(fixt.fixture.commence_time);\r\n    \r\n    //function to add bet \r\n    const addBet = (fixture, bettype) => {\r\n        let tmp = [...props.bets];\r\n        let bet = {\r\n            id : bettype+\"-\"+fixture.fixture_id,\r\n            time : fixture.fixture.commence_time,\r\n            wager: Number,\r\n            fixture : fixture.fixture.home_team+\" vs \"+fixture.fixture.away_team,\r\n            fixtureID : fixture.fixture_id\r\n        };\r\n\r\n        //Format Bet\r\n        switch (bettype){\r\n            case \"away-spread\" : \r\n                bet.bet = fixture.fixture.away_team;\r\n                bet.odds = fixture.fixture.odds.spreads.away.odds;\r\n                bet.handicap = formatHandicap(fixture.fixture.odds.spreads.away.points);\r\n                bet.type = \"Spread\";\r\n                bet.team = {\r\n                    type: \"Away\",\r\n                    name: fixture.fixture.away_team\r\n                }\r\n            break;\r\n            case \"away-ml\" : \r\n                bet.type = \"Moneyline\";\r\n                bet.bet = fixture.fixture.away_team;\r\n                bet.odds = fixture.fixture.odds.h2h.away;\r\n                bet.team = {\r\n                    type: \"Away\",\r\n                    name: fixture.fixture.away_team\r\n                }\r\n            break;\r\n            case \"home-spread\" : \r\n                bet.bet = fixture.fixture.home_team;\r\n                bet.handicap = formatHandicap(fixture.fixture.odds.spreads.home.points);\r\n                bet.odds = fixture.fixture.odds.spreads.home.odds;\r\n                bet.type = \"Spread\";  \r\n                bet.team = {\r\n                    type: \"Home\",\r\n                    name: fixture.fixture.home_team\r\n                }\r\n            break;\r\n            case \"home-ml\" : \r\n                bet.bet = fixture.fixture.home_team;\r\n                bet.odds = fixture.fixture.odds.h2h.home;\r\n                bet.type = \"Moneyline\";\r\n                bet.team = {\r\n                    type: \"Home\",\r\n                    name: fixture.fixture.home_team\r\n                }\r\n            break;\r\n            case \"over\" : \r\n                bet.odds = fixture.fixture.odds.totals.over;\r\n                bet.type = \"Total\";\r\n                bet.bet = \"Over\";\r\n                bet.total = fixture.fixture.odds.totals.points;\r\n            break;\r\n            case \"under\" : \r\n                bet.odds = fixture.fixture.odds.totals.under;\r\n                bet.type = \"Total\";\r\n                bet.bet = \"Under\";\r\n                bet.total = fixture.fixture.odds.totals.points;\r\n            break;\r\n            default : break; \r\n        }\r\n        tmp.push(bet);\r\n        props.setBets(tmp);\r\n    }\r\n\r\n    //Funtion to either add or remove bet to/from bets array\r\n    const handleBetClick = (fixt, bettype) => {\r\n        let tmpBets = [...props.bets];\r\n        const id = bettype+\"-\"+fixt.fixture_id;\r\n        const element = document.getElementById(id);\r\n        const index = tmpBets.map(bet => bet.id).indexOf(id);\r\n\r\n        if(index > -1){\r\n            props.removeBet(bettype+\"-\"+fixt.fixture_id)\r\n        }else{\r\n            addBet(fixt, bettype);\r\n            element.classList.add(\"selected-bet\");        \r\n        } \r\n    }\r\n\r\n    return (                                \r\n        <>\r\n            <tr>\r\n                <td rowSpan={2} className=\"fixtTime\">{formattedTime}</td>\r\n                <td className=\"fixtCol\">{fixt.fixture.away_team}</td>\r\n                {!isEmpty(fixt.fixture.odds.spreads) ?\r\n                    <td className=\"line\" id={\"away-spread-\"+fixt.fixture_id} onClick={()=>handleBetClick(fixt,\"away-spread\")}>{fixt.fixture.odds.spreads.away.points +\" (\"+fixt.fixture.odds.spreads.away.odds+\")\"}</td>      \r\n                        :\r\n                    <td className=\"line\"></td>\r\n                }\r\n                {!isEmpty(fixt.fixture.odds.h2h) ?\r\n                    <td  className=\"line\" id={\"away-ml-\"+fixt.fixture_id} onClick={()=>handleBetClick(fixt,\"away-ml\")} >{fixt.fixture.odds.h2h.away}</td>        \r\n                        :\r\n                    <td className=\"line\"></td>\r\n                }\r\n                {!isEmpty(fixt.fixture.odds.totals) ?\r\n                    <td className=\"line\" id={\"over-\"+fixt.fixture_id} onClick={()=>handleBetClick(fixt,\"over\")} >{\"O\"+fixt.fixture.odds.totals.points +\" (\"+fixt.fixture.odds.totals.over+\")\"}</td>       \r\n                        :\r\n                    <td className=\"line\"></td>\r\n                }\r\n            </tr> \r\n            <tr className=\"bottomFixtRow\">\r\n                <td className=\"fixtCol\">{fixt.fixture.home_team}</td>\r\n                {!isEmpty(fixt.fixture.odds.spreads) ?\r\n                    <td className=\"line\" id={\"home-spread-\"+fixt.fixture_id} onClick={()=>handleBetClick(fixt,\"home-spread\")}>{fixt.fixture.odds.spreads.home.points +\" (\"+fixt.fixture.odds.spreads.home.odds+\")\"}</td>      \r\n                        :\r\n                    <td className=\"line\"></td>\r\n                }\r\n                {!isEmpty(fixt.fixture.odds.h2h) ?\r\n                    <td className=\"line\" id={\"home-ml-\"+fixt.fixture_id} onClick={()=>handleBetClick(fixt,\"home-ml\")}>{fixt.fixture.odds.h2h.home}</td>        \r\n                        :\r\n                    <td className=\"line\"></td>\r\n                }\r\n                {!isEmpty(fixt.fixture.odds.totals) ?\r\n                    <td className=\"line\" id={\"under-\"+fixt.fixture_id} onClick={()=>handleBetClick(fixt,\"under\")}>{\"U\"+fixt.fixture.odds.totals.points +\" (\"+fixt.fixture.odds.totals.under+\")\"}</td>       \r\n                        :\r\n                    <td className=\"line\"></td>\r\n                }\r\n            </tr> \r\n            <tr className=\"spacer\"></tr>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Fixture","import React, { useState, useEffect } from 'react';\r\nimport {Tabs, Tab, Spinner, Form, Col} from 'react-bootstrap';\r\nimport Leaderboard from '../individual/ActiveContest/Leaderboard';\r\nimport SettledBets from '../individual/ActiveContest/bets/SettledBets';\r\nimport OpenBets from '../individual/ActiveContest/bets/OpenBets';\r\nimport Book from '../individual/ActiveContest/Book/Book';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport isEmpty from '../../utils/isEmpty';\r\nimport formatCurrency from '../../utils/formatCurrency';\r\n\r\nconst LiveContest = (props) => {\r\n    const match = useRouteMatch();\r\n    const [display, setDisplay] = useState(false);\r\n    const [activeTab, setActiveTab] = useState('book');\r\n\r\n    //Function to run on render and fetch contest + contestLeagues + contestBets\r\n    useEffect(()=>{\r\n        const fetchContest = async () => {\r\n            const response = await fetch('https://api.lineleaders.net/contests/byID?id='+match.params.contestid);\r\n            const data = await response.json();\r\n            props.setContest(data)\r\n            fetchBets();\r\n        }\r\n        const fetchLeagues = async () =>{\r\n            const response = await fetch('https://api.lineleaders.net/contests/contestLeagues/byID?id='+match.params.contestid);\r\n            const data = await response.json();\r\n            props.setLeagues(data)\r\n        }\r\n        \r\n        const fetchBets = async ()=> {\r\n            const response = await fetch('https://api.lineleaders.net/bets/byEntry?entryid='+match.params.entryid);\r\n            const bets = await response.json();\r\n            //separate into open and settled and set redux state\r\n            let open = [];\r\n            let settled = [];\r\n\r\n            bets.forEach(bet=>{\r\n                if(bet.result === \"W\"|| bet.result === \"L\" || bet.Result ===\"P\"){\r\n                    settled.push(bet);\r\n                }else{\r\n                    open.push(bet);\r\n                }\r\n            })\r\n            props.setOpenBets(open);\r\n            props.setSettledBets(settled);\r\n        }\r\n\r\n\r\n        \r\n        fetchContest();\r\n        fetchLeagues();\r\n        fetch_leaderboards();\r\n    },[])\r\n    \r\n    //Function to fetch leaderboards\r\n    const fetch_leaderboards = async() => {\r\n        const response = await fetch('https://api.lineleaders.net/contests/leaderboards/?id='+match.params.contestid);\r\n        let leaderboards = await response.json();\r\n        if(leaderboards.length > 0){\r\n            props.setLeaderboards(leaderboards)\r\n        }\r\n    }\r\n\r\n    //funciton to separate into upcoming and inplay fixtures by leagues\r\n    const organizeFixtures = (leagueFixts) => {\r\n        let upcoming = [];\r\n        let inplay = [];\r\n\r\n        leagueFixts.forEach(league=>{\r\n            //add new league fixts objects to upcoming and inplay arrays\r\n            upcoming.push({\r\n                leagueID: league.leagueID,\r\n                fixtures: []\r\n            });\r\n\r\n            inplay.push({\r\n                leagueID: league.leagueID,\r\n                fixtures: []\r\n            })\r\n\r\n            //sort league fixtures into upcoming and inplay\r\n            league.fixtures.forEach(fixt=>{\r\n                //upcoming\r\n                if(fixt.time_status == 0){\r\n                    let upcIndex = upcoming.findIndex(lf=> parseInt(lf.leagueID) === parseInt(league.leagueID));\r\n                    upcoming[upcIndex].fixtures.push(fixt)\r\n                //inplay\r\n                }else{\r\n                    let inpIndex = inplay.findIndex(lf=> parseInt(lf.leagueID) === parseInt(league.leagueID));\r\n                    inplay[inpIndex].fixtures.push(fixt)\r\n                } \r\n            })\r\n        })\r\n        //set upcoming and inplay\r\n        props.setUpcoming(upcoming);\r\n        props.setInplay(inplay);\r\n        setDisplay(true);\r\n    }\r\n\r\n    //run whenever leagues or contest is set, if contest is not empty fetch fixtures by league w/ time frame\r\n    useEffect(()=>{\r\n        if(!isEmpty(props.contest)){\r\n            const fetchFixtures = async() => {\r\n                let leagueIds = props.leagues.map(league=>{\r\n                    return league.intLeagueID\r\n                });\r\n\r\n                if(leagueIds.length > 0){  \r\n                    //api parameters to get fixtures\r\n                    let body = {\r\n                        leagueIDs: [leagueIds],\r\n                        start:props.contest.dtmStart,\r\n                        end: props.contest.dtmEnd\r\n                    }\r\n                    const url ='https://api.lineleaders.net/fixtures/byLeagues/withTimeFrame'\r\n                    const options = {\r\n                        method:'POST',\r\n                        headers:{\r\n                            'Content-Type': 'application/json;charset=UTF-8'\r\n                        }, \r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    //call api\r\n                    const response = await fetch(url, options);\r\n                    const leagueFixts = await response.json();\r\n                    //organize fixtures and set upcoming + inplay\r\n                    organizeFixtures(leagueFixts);\r\n                }\r\n            }\r\n            fetchFixtures();        \r\n        }\r\n    },[props.leagues, props.contest])\r\n\r\n\r\n    //Run on settled bets change, calculate bankroll and update store\r\n    useEffect(()=>{\r\n        //calculate bankroll\r\n        let bankroll = 0;\r\n        props.settledBets.forEach(bet=>{\r\n            //update bankroll\r\n            if(bet.result === \"W\" ){\r\n                let win = parseFloat(bet.odds - 1);\r\n                win = (win * parseFloat(bet.wager));\r\n                bankroll = bankroll +  win;\r\n            }else if(bet.result === \"L\" ){\r\n                bankroll = bankroll - parseFloat(bet.wager);\r\n            }else if(bet.result === \"P\" ) return;\r\n        })\r\n        props.setBankroll(parseFloat(bankroll).toFixed(2));\r\n    },[props.settledBets])\r\n\r\n    //Run on open bets or bankroll change, calculate available \r\n    useEffect(()=>{\r\n        if(!isNaN(props.bankroll)){\r\n            let available = parseFloat(props.bankroll) + parseFloat(props.contest.decInitialBankRoll);\r\n            props.openBets.forEach(bet=>{\r\n                available = available - parseFloat(bet.wager)    \r\n            })\r\n            props.setAvailable(available)\r\n        }\r\n    },[props.openBets, props.bankroll])\r\n\r\n    if(Object.getOwnPropertyNames(props.contest).length > 0 && display===true){ \r\n        return (\r\n            <>\r\n                <h3>{props.contest.strContestName}</h3>\r\n                <br/><b>Available:</b> {formatCurrency(props.available)}\r\n                <b> Bankroll:</b> {formatCurrency(props.bankroll)}\r\n                {/* Display when screens are md or smaller */}\r\n                <Form className=\"hidden-lg\">\r\n                    <Form.Row>                    \r\n                            <Col>\r\n                                <Form.Control as=\"select\" onChange={(e)=>setActiveTab(e.target.value)}>\r\n                                    <option key=\"book\" value=\"book\">Book</option>\r\n                                    <option key=\"open\" value=\"open\">{\"Open (\"+props.openBets.length+\")\"}</option>\r\n                                    <option key=\"settled\" value=\"settled\">Settled</option>\r\n                                    <option key=\"leaderboard\" value=\"leaderboard\">Leaderboard</option>\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Row>\r\n                </Form>\r\n                {/* Display when screens are large */}\r\n                <Tabs fill activeKey={activeTab} onSelect={(k)=>setActiveTab(k)} id=\"contestsTab\" className=\"hidden-md\">\r\n                    <Tab eventKey=\"book\" title=\"BOOK\">\r\n                        <Book leagues={props.leagues} inplay={props.inplayFixts} upcoming={props.upcomingFixts} /> \r\n                    </Tab>\r\n                    <Tab eventKey=\"open\" title={\"OPEN (\"+props.openBets.length+\")\"}>\r\n                        <OpenBets />\r\n                    </Tab>\r\n                    <Tab eventKey=\"settled\" title=\"SETTLED\">\r\n                        <SettledBets />\r\n                    </Tab>\r\n                    <Tab eventKey=\"leaderboard\" title=\"LEADERBOARD\">\r\n                        <Leaderboard />\r\n                    </Tab>\r\n                </Tabs>\r\n                \r\n            </>\r\n        )\r\n    }else return (\r\n        <>\r\n            <Spinner animation=\"border\"/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      contest: state.contest.contest,\r\n      leaderboards: state.contest.leaderboards,\r\n      entryID: state.contest.entryID,\r\n      bankroll: state.contest.bankroll,\r\n      available: state.contest.available,\r\n      openBets: state.contest.openBets, \r\n      settledBets: state.contest.settledBets,\r\n      leagues: state.contest.leagues,\r\n      upcomingFixts: state.contest.upcomingFixts,\r\n      inplayFixts: state.contest.inplayFixts\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = ( dispatch ) => {\r\n    return{\r\n      setContest: contest => { dispatch({type: 'SET_CONTEST', contest: contest })},\r\n      setEntryID: id => { dispatch({type: 'SET_ENTRY_ID', ID: id })},      \r\n      setAvailable: avaialable => { dispatch({type: 'SET_AVAILABLE', available: avaialable })},\r\n      setBankroll: bankroll => { dispatch({type: 'SET_BANKROLL', bankroll: bankroll })},\r\n      setOpenBets: bets => { dispatch({type: 'SET_OPEN_BETS', bets: bets })},      \r\n      setSettledBets: bets => { dispatch({type: 'SET_SETTLED_BETS', bets: bets })},\r\n      setLeagues: leagues => { dispatch({type: 'SET_LEAGUES', leagues:leagues})},\r\n      setUpcoming: upcoming => {dispatch({type: 'SET_UPCOMING', upcoming:upcoming})},\r\n      setInplay: inplay => {dispatch({type: 'SET_INPLAY', inplay:inplay})},\r\n      setLeaderboards: leaderboards => {dispatch({type: 'SET_LEADERBOARDS', leaderboards:leaderboards})}\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LiveContest);\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Col, Form, Table} from 'react-bootstrap';\r\nimport formatTime from '../../../utils/formatTime';\r\n\r\nconst Bet = (props) => {\r\n    const [risk, setRisk] = useState(\"\");\r\n    const [win, setWin] = useState(\"\");\r\n    const bet = props.bet;\r\n    //index of bet in array\r\n    const i = props.i;\r\n\r\n    //Run whenever risk is set, set win variable and setWager on bet in array \r\n    useEffect(()=>{\r\n        if(risk !== \"\"){\r\n            let odds = parseFloat(bet.odds);\r\n            let tmpRisk = parseFloat(risk);\r\n            let tmpWin;\r\n            if(odds > 0){\r\n                tmpWin = parseFloat(tmpRisk*parseFloat(odds)/100).toFixed(2);\r\n            }else{\r\n                odds = Math.abs(odds);\r\n                let denom = odds/100;\r\n                tmpWin = parseFloat(tmpRisk/ denom).toFixed(2);\r\n            }\r\n            setWin(tmpWin);\r\n        }else{\r\n            setWin(\"\")\r\n        }\r\n\r\n        props.addWager(bet.id, risk)\r\n\r\n    },[risk])\r\n\r\n    //Function to toggle bet details \r\n    const toggleDetails = (i) => {\r\n        let detailRows = document.getElementsByClassName(\"betDetails\"+i);\r\n        let arrow = document.getElementById(\"arrow\"+i);\r\n\r\n        for(let i =0; i < detailRows.length; i++){\r\n            if(detailRows[i].style.display === 'none'){\r\n                detailRows[i].style.display = '';\r\n                arrow.classList.remove(\"right\");\r\n                arrow.classList.add(\"down\");\r\n            }else{\r\n                detailRows[i].style.display = 'none';\r\n                arrow.classList.remove(\"down\");\r\n                arrow.classList.add(\"right\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Table className=\"bet\">\r\n            <tbody>\r\n                <tr>\r\n                    {(bet.type === \"Spread\") ? \r\n                        <td onClick={()=>toggleDetails(i)}><i className=\"arrow right\" id={\"arrow\"+i} ></i> {bet.bet+\" \"+bet.handicap}</td>\r\n                    : \r\n                    (bet.type === \"Total\") ?\r\n                        <td onClick={()=>toggleDetails(i)}><i className=\"arrow right\" id={\"arrow\"+i} ></i> {bet.bet+\" \"+bet.total} </td>\r\n                    :\r\n                        <td onClick={()=>toggleDetails(i)}><i className=\"arrow right\" id={\"arrow\"+i} ></i> {bet.bet}</td>\r\n                    }\r\n                    <td className=\"odds\">{bet.odds.american} <i onClick={()=>props.removeBets([bet.id])}>&times;</i></td> \r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={2}>{bet.type}</td>\r\n                </tr>\r\n                <tr style={{display:'none'}} className={\"betDetails\"+i}>\r\n                    <td  colSpan={2}>{bet.fixture}</td>\r\n                </tr>\r\n                <tr style={{display:'none'}} className={\"betDetails\"+i}>\r\n                    <td colSpan={2}>{formatTime(bet.time)}</td>\r\n                </tr>\r\n                {props.slipType === \"Straight\" ? \r\n                    <tr>\r\n                        <td colSpan={2}>\r\n                            <Form>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Control type=\"number\" placeholder=\"Risk\" value={risk} onChange={(e)=>setRisk(e.target.value)}/>\r\n                                    </Form.Group> \r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Control type=\"text\"  tabIndex=\"-1\" placeholder=\"Win\" value={win} readOnly/>\r\n                                    </Form.Group> \r\n                                </Form.Row>\r\n                            </Form>\r\n                        </td>   \r\n                    </tr>\r\n                    :\r\n                    <></>\r\n                }    \r\n            </tbody>\r\n        </Table>    \r\n    )\r\n}\r\n\r\nexport default Bet","import React from 'react'\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\n/* \r\nComponent takes following props\r\nshow - boolean to show or hide modal\r\nclose - function to set parent variable that handles display of modal to false\r\naction - call back funtion to action on clicking button\r\nbuttonText - text to display on button\r\nmessage - title text for modal\r\n*/\r\n\r\nconst ConfirmationModal = (props) => {\r\n    return (\r\n        <Modal show={props.show} onHide={props.close}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{props.message}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.close}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.action}>\r\n                    {props.buttonText}\r\n                </Button>\r\n                </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ConfirmationModal","import React, { useState } from 'react';\r\nimport {Card, Button, Alert} from 'react-bootstrap';\r\nimport '../../../css/betslip.css'\r\nimport Bet from './Bet';\r\nimport {model, ML, Spread, Total, Leg} from '../../../models/bet/bet';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport ConfirmationModal from '../../shared/ConfirmationModal';\r\n\r\nconst BetSlip = (props) => {\r\n    const match = useRouteMatch();\r\n    const [error, setError] = useState();\r\n    const [showConfirm, setShowConfirm] = useState(false);\r\n    let bets = props.bets;\r\n    //State variable to hold slip type (straight, parlay, etc.)\r\n    const [slipType, setSlipType] = useState(\"Straight\")\r\n    const [records, setRecords] = useState([]);\r\n\r\n    //add wager amount to Straight bet \r\n    const addWager = (id, wager) => {\r\n        //find index\r\n        const index = bets.map(bet => bet.id).indexOf(id);\r\n        let tmpBets = bets;\r\n        tmpBets[index].wager = wager;\r\n        bets = tmpBets;\r\n    }\r\n\r\n    //Function to format straight bets in records for db storage\r\n    const formatStraightBet = (bet) =>{\r\n        //create instance of bet model obj and add properties\r\n        let betModel = {...model};\r\n        betModel.type = slipType;\r\n        betModel.wager = bet.wager;\r\n        betModel.odds = bet.odds;\r\n        betModel.result = \"\";\r\n        \r\n        //create instance of leg obj \r\n        let leg = {...Leg};\r\n\r\n        let legType = bet.type;\r\n        if(legType === \"Spread\"){\r\n            //create instance of spread line object \r\n            let spread = {...Spread}; \r\n            spread.team = {...spread.team}\r\n            spread.team.type = bet.team.type;\r\n            spread.team.name = bet.team.name;\r\n            spread.line = bet.handicap;\r\n            leg.fixture = {...leg.fixture}\r\n            leg.fixture.fixtureID = bet.fixtureID; \r\n            leg.fixture.fixture = bet.fixture; \r\n            leg.fixture.time = bet.time; \r\n            leg.line = spread;\r\n            leg.odds = bet.odds;\r\n            leg.result =\"\";\r\n        }else if(legType === \"Moneyline\"){\r\n            //create instance of ML line object\r\n            let ml = {...ML}; \r\n            ml.team = {...ml.team}\r\n            ml.team.type = bet.team.type;\r\n            ml.team.name = bet.team.name;\r\n            leg.fixture = {...leg.fixture}\r\n            leg.fixture.fixtureID = bet.fixtureID; \r\n            leg.fixture.fixture = bet.fixture; \r\n            leg.fixture.time = bet.time;             \r\n            leg.line = ml;\r\n            leg.odds = bet.odds; \r\n            leg.result =\"\";       \r\n        }else if(legType === \"Total\"){\r\n            //create instance of Total line object\r\n            let total = {...Total}; \r\n            total.bet = bet.bet;\r\n            total.line = bet.total;\r\n            leg.fixture = {...leg.fixture}\r\n            leg.fixture.fixtureID = bet.fixtureID; \r\n            leg.fixture.fixture = bet.fixture; \r\n            leg.fixture.time = bet.time; \r\n            leg.line = total;\r\n            leg.odds = bet.odds;\r\n            leg.result =\"\";\r\n        }\r\n\r\n        return {\r\n            account_id: props.user_id,\r\n            jsonBet: betModel,\r\n            leg: leg\r\n        };\r\n    }\r\n\r\n    //function to validate and confirm bets, then confirm placements of bets\r\n    const validateBets = async() => {\r\n        //check to make sure all bets contain valid wagers and combine wagers from all bets\r\n        let totalWagered = 0;\r\n        //object to hold error\r\n        let error = {\r\n            isError: false,\r\n            message: String\r\n        }\r\n\r\n        await bets.forEach(bet=>{\r\n            if(bet.wager > 0){\r\n                totalWagered = totalWagered + parseFloat(bet.wager);\r\n            }else{\r\n                error.isError = true;\r\n                error.message =\"Please enter a valid wager amount for all bets\";\r\n            }\r\n        })\r\n\r\n        //check for error and either insert bets or display error message\r\n        if(error.isError === true){\r\n            setError(<Alert variant='danger'>{error.message}</Alert>)\r\n            return;\r\n        }else{\r\n            //clear any error message, display confirmation box\r\n            setError();\r\n            setShowConfirm(true);\r\n\r\n            //determine type of bet(s) - straight,parlay,etc.\r\n            if(slipType === \"Straight\"){\r\n                let tmpRecords = [];\r\n                //format each bet and set records state array\r\n                bets.forEach(bet=>{\r\n                    let tmpModel = formatStraightBet(bet)\r\n                    tmpRecords.push(tmpModel);\r\n                })\r\n                \r\n                setRecords(tmpRecords);\r\n            }\r\n        }   \r\n    }\r\n\r\n    //Function to insert records into the database\r\n    const insertBetRecords = async() => {\r\n        //close modal\r\n        setShowConfirm(false);\r\n\r\n        //api parameters to create bets\r\n        const body = {\r\n            bets: records\r\n        }\r\n\r\n        const url ='https://api.lineleaders.net/bets/createPersonal';\r\n        const options = {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json;charset=UTF-8'\r\n            }, \r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        //call api and check res code\r\n        let response = await fetch(url, options);\r\n        let json = await response.json();\r\n\r\n        //if resources have been created, clear bets array\r\n        if(json.code === 201){\r\n            let ids = [];\r\n            bets.forEach(bet=>{\r\n                ids.push(bet.id);\r\n            })    \r\n            props.removeBets(ids);\r\n        }\r\n    }\r\n\r\n    //Function to handle cancellation of bet submission\r\n    const handleCancellation = () => {\r\n        setRecords([]);\r\n        setShowConfirm(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card >\r\n                <Card.Header>Bet Slip</Card.Header>\r\n                <Card.Body>\r\n                    {bets.map((bet, i)=>{\r\n                    return(\r\n                            <Bet key={bet.bet+bet.id} bet={bet} i={i} removeBets={props.removeBets} slipType={slipType} addWager={addWager}/>\r\n                        )\r\n                    })}\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    {error}\r\n                    <Button onClick={()=>validateBets()} variant=\"primary\">Place Bet(s)</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n            <ConfirmationModal close={handleCancellation} show={showConfirm} action={insertBetRecords} buttonText=\"Yes\" message={\"Are you ready to place your bets?\"}/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user_id: state.user.ID,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BetSlip);","import React, {useEffect, useState} from 'react'\r\nimport Fixture from './Fixture';\r\nimport {Table, Row, Col} from 'react-bootstrap';\r\nimport BetSlip from './BetSlip/BetSlip';\r\n\r\nimport '../../css/global/fixtures.css';\r\nconst Book = () => {\r\n    const [book, setBook] = useState([]);\r\n    const [bets, setBets] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchBook = async() =>{\r\n            const response = await fetch('https://api.lineleaders.net/fixtures/getBook');\r\n            const data = await response.json();\r\n            setBook(data);\r\n        }\r\n\r\n        fetchBook();\r\n    },[])\r\n\r\n    //organize by league\r\n    useEffect(()=>{\r\n\r\n    },[])\r\n\r\n    //function to remove a single bet\r\n    const removeBet = (id) => {\r\n        console.log(id)\r\n        //get temp array\r\n        let tmpBets = [...bets];\r\n        //get index \r\n        const index = tmpBets.map(bet => bet.id).indexOf(id);\r\n        //get element by id\r\n        const element = document.getElementById(id);\r\n        //remove class\r\n        element.classList.remove(\"selected-bet\");     \r\n        //remove bet from array   \r\n        tmpBets.splice(index, 1);\r\n        console.log(tmpBets)\r\n        //set bets array\r\n        setBets(tmpBets);\r\n    }\r\n\r\n    //function to remove bets after submission, takes array of ids\r\n    const removeBets = (ids) => {\r\n        //get temp array\r\n        let tmpBets = [...bets];\r\n        ids.forEach(id=> {\r\n            //get index \r\n            const index = tmpBets.map(bet => bet.id).indexOf(id);\r\n            //get element by id\r\n            const element = document.getElementById(id);\r\n            //remove class\r\n            element.classList.remove(\"selected-bet\");     \r\n            //remove bet from array   \r\n            tmpBets.splice(index, 1);\r\n            console.log(tmpBets)\r\n            //set bets array\r\n        })\r\n        setBets(tmpBets);\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={8} sm={12}> \r\n                <Table className=\"fixtureTable\" responsive>\r\n                    <thead className=\"fixtHeader\">\r\n                        <tr>\r\n                            <th className=\"timeHeader\"></th>\r\n                            <th className=\"fixtCol\">Fixture</th>\r\n                            <th className=\"lineCol\">Spread</th>\r\n                            <th className=\"lineCol\">Win</th>\r\n                            <th className=\"lineCol\">Total</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {book.map(fixt=>{\r\n                            return <Fixture key={fixt.fixture_id} fixt={fixt} bets={bets} setBets={setBets} removeBet={removeBet}/>\r\n                        })}\r\n                    </tbody>  \r\n                </Table>\r\n\r\n            </Col>\r\n            <Col md={4} sm={12}>\r\n                <BetSlip bets={bets} removeBets={removeBets} />\r\n            </Col>\r\n        </Row>   \r\n    )\r\n}\r\n\r\nexport default Book","import React from 'react';\nimport './App.css';\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport history from \"./utils/history\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport {Container, Row} from 'react-bootstrap';\nimport './css/global/media.css'\nimport './css/global/global.css'\n\n//Components\nimport NavBar from './components/individual/NavBar'; \nimport Profile from './components/pages/Profile';\nimport PrivateRoute from './components/individual/PrivateRoute';\nimport AdminPage from './components/pages/Admin';\nimport ContestsPage from './components/pages/ContestsPage';\nimport Lobby from './components/pages/LobbyPage';\nimport LiveContest from './components/pages/LiveContest';\nimport Book from './social/Book/Book';\n\nfunction App() {\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <Container className=\"App\">\n      <Router history={history}>\n        <Row>\n          <NavBar />\n        </Row>\n          <Switch>\n            <Route exact path=\"/\"/>\n            <Route path=\"/book\" component={Book} />\n            <PrivateRoute path=\"/profile\" component={Profile} />\n            <PrivateRoute path=\"/admin\" component={AdminPage} /> \n\n            {/* <PrivateRoute path=\"/lobby\" component={Lobby} />\n            <PrivateRoute path=\"/contests\" component={ContestsPage} />\n            <PrivateRoute path=\"/live-contest/:contestid/entry/:entryid\" component={LiveContest} />  */}\n          </Switch>\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initValues  = {\r\n    ID: null, \r\n    username: '',\r\n    balance: null,\r\n    permissions:  [],\r\n    openBets: [],    \r\n    settledBets: []\r\n}\r\n\r\nconst userReducer = (state = initValues, action) =>{\r\n    switch(action.type){\r\n        case 'SET_USER_ID': {\r\n            state = {...state, ID: action.ID};\r\n            break;\r\n        }\r\n        case 'SET_PERMISSIONS': {\r\n            state =  {...state, permissions: action.permissions};\r\n            break;\r\n        }\r\n        case 'SET_USER_USERNAME': {\r\n            state = {...state, username: action.username}\r\n            break;\r\n        }\r\n        case 'SET_USER_BALANCE': {\r\n            state = {...state, balance: action.balance}\r\n            break;\r\n        }\r\n        case 'SET_OPEN_BETS': {\r\n            state =  {...state, openBets: action.bets};\r\n            break;\r\n        }\r\n        case 'SET_SETTLED_BETS': {\r\n            state =  {...state, settledBets: action.bets};\r\n            break;\r\n        }\r\n        default : break;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default userReducer;","const initValues  = {\r\n    contest: {}, \r\n    leaderboards:[],\r\n    openBets: [],    \r\n    settledBets: [],\r\n    entryID: null,\r\n    bankroll: null,\r\n    available: null,\r\n    leagues: [],\r\n    upcomingFixts:[],\r\n    inplayFixts:[]\r\n}\r\n\r\nconst contestReducer = (state = initValues, action) =>{\r\n    switch(action.type){\r\n        case 'SET_CONTEST': {\r\n            state = {...state, contest: action.contest};\r\n            break;\r\n        }\r\n        case 'SET_OPEN_BETS': {\r\n            state =  {...state, openBets: action.bets};\r\n            break;\r\n        }\r\n        case 'SET_SETTLED_BETS': {\r\n            state =  {...state, settledBets: action.bets};\r\n            break;\r\n        }\r\n        case 'SET_ENTRY_ID': {\r\n            state =  {...state, entryID: action.bets};\r\n            break;\r\n        }\r\n        case 'SET_BANKROLL': {\r\n            state =  {...state, bankroll: action.bankroll};\r\n            break;\r\n        }\r\n        case 'SET_AVAILABLE': {\r\n            state =  {...state, available: action.available};\r\n            break;\r\n        }\r\n        case 'SET_LEAGUES': {\r\n            state = {...state, leagues: action.leagues}\r\n        }\r\n        case 'SET_UPCOMING': {\r\n            state = {...state, upcomingFixts: action.upcoming}\r\n        }\r\n        case 'SET_INPLAY': {\r\n            state = {...state, inplayFixts: action.inplay}\r\n        }\r\n        case 'SET_LEADERBOARDS': {\r\n            if(typeof action.leaderboards !== \"undefined\"){\r\n                state = {...state, leaderboards: action.leaderboards}\r\n            }\r\n        }\r\n        default : break; \r\n    }\r\n    return state;\r\n}\r\n\r\nexport default contestReducer;","import {combineReducers} from \"redux\";\r\nimport userReducer  from './userReducer';\r\nimport contestReducer from './contestReducer';\r\n\r\nconst reducers = combineReducers({\r\n    user: userReducer,\r\n    contest: contestReducer\r\n})\r\n\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\nimport {createStore} from \"redux\";\nimport reducer from './redux/reducer';\nimport {Provider} from \"react-redux\";\n//create Redux store\nconst store = createStore(reducer);\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    audience={config.audience} \n    onRedirectCallback={onRedirectCallback}\n  >\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </Auth0Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}